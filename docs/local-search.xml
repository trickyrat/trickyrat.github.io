<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Leetcode-540 Single Element in a Sorted Array</title>
    <link href="/2022/02/14/Leetcode-540/"/>
    <url>/2022/02/14/Leetcode-540/</url>
    
    <content type="html"><![CDATA[<h2 id="description"><a class="markdownIt-Anchor" href="#description"></a> Description</h2><p>You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.</p><p>Return the single element that appears only once.</p><p>Your solution must run in O(log n) time and O(1) space.</p><h2 id="examples"><a class="markdownIt-Anchor" href="#examples"></a> Examples</h2><p>Example  1:</p><blockquote><p>Input: nums = [1,1,2,3,3,4,4,8,8]<br />Output: 2</p></blockquote><p>Example 2:</p><blockquote><p>Input: nums =  [3,3,7,7,10,11,11]<br />Output: 10</p></blockquote><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>因为只出现一次的元素下标x的左右两边均有偶数个元素，那么数组的长度一定为奇数。又因数组是有序的，那么相同的元素必然是相连的。<br />当索引为x的元素，如果其左边的元素的索引满足 <code>nums[y] = nums[y+1]</code> y必定为偶数；相对地，如果其右边元素的索引满足 <code>nums[y] = nums[y+1]</code> y必定为奇数。<br />我们可以得出数组中存在奇偶分界条件，则可以使用二分搜索来找到改分界点，便是目标元素。搜索的左右边界分别为0为数组最大索引，即[0, N],N为数组长度减一。<br />当mid为偶数时，我们需要比较nums[mid]和nums[mid+1]是否相等<br />当mid为奇数时，我们需要比较nums[mid]和nums[mid-1]是否相等<br />如果<code>mid &lt; x</code>，那么目标值便是在右侧，相应地，当 <code>mid &gt; x</code>，则目标值在左侧。特殊地，我们可以使用异或操作目标，因为当mid为偶数时，<code>mid + 1 = mid ^ 1</code>；当mid为奇数时，<code>mid - 1 = mid ^ 1</code>。因此可以不用再去判断mid的奇偶性，而是判断 <code>nums[mid]</code> 和 <code>nums[mid ^ 1]</code> 大小进行搜索。</p><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><h3 id="c"><a class="markdownIt-Anchor" href="#c"></a> C#</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">SingleNonDuplicate</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] nums</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> low = <span class="hljs-number">0</span>, high = nums.Length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (low &lt; high)<br>    &#123;<br>        <span class="hljs-built_in">int</span> mid = (high - low) / <span class="hljs-number">2</span> + low;<br>        <span class="hljs-keyword">if</span> (nums[mid] == nums[mid ^ <span class="hljs-number">1</span>])<br>        &#123;<br>            low = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            high = mid;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> nums[low];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="typescript"><a class="markdownIt-Anchor" href="#typescript"></a> Typescript</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">singleNonDuplicate</span>(<span class="hljs-params">nums: <span class="hljs-built_in">number</span>[]</span>): <span class="hljs-built_in">number</span><br>&#123;<br>    <span class="hljs-keyword">let</span> low = <span class="hljs-number">0</span>, high = nums.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (low &lt; high)<br>    &#123;<br>        <span class="hljs-keyword">let</span> mid = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((high - low) / <span class="hljs-number">2</span>) + low;<br>        <span class="hljs-keyword">if</span> (nums[mid] == nums[mid ^ <span class="hljs-number">1</span>])<br>        &#123;<br>            low = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            high = mid;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> nums[low];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="python"><a class="markdownIt-Anchor" href="#python"></a> Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">singleNonDuplicate</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        low, high = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> low &lt; high:<br>            mid = (low + high) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[mid] == nums[mid ^ <span class="hljs-number">1</span>]:<br>                low = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                high = mid<br>        <span class="hljs-keyword">return</span> nums[low]<br></code></pre></td></tr></table></figure><h3 id="c-2"><a class="markdownIt-Anchor" href="#c-2"></a> C++</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">singleNonDuplicate</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> low = <span class="hljs-number">0</span>, high = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (low &lt; high) &#123;<br>            <span class="hljs-type">int</span> mid = (high - low) / <span class="hljs-number">2</span> + low;<br>            <span class="hljs-keyword">if</span> (nums[mid] == nums[mid ^ <span class="hljs-number">1</span>]) &#123;<br>                low = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                high = mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums[low];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithms</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis Notes-05</title>
    <link href="/2022/01/18/Redis%20Notes-05/"/>
    <url>/2022/01/18/Redis%20Notes-05/</url>
    
    <content type="html"><![CDATA[<h2 id="redis中的布隆过滤器bloomfilter"><a class="markdownIt-Anchor" href="#redis中的布隆过滤器bloomfilter"></a> Redis中的布隆过滤器（BloomFilter）</h2><p><code>Redis</code>官方在<code>4.0</code>版本中提供了插件功能，此时可以将<code>rebloom</code>作为插件加载到Redis Server中，给Redis提供布隆去重功能。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs docker">docker pull redislab/rebloom<br>docker <span class="hljs-keyword">run</span><span class="language-bash"> -p 6739:6739 redislab/rebloom</span><br>redis-cli<br></code></pre></td></tr></table></figure><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta"># 插入</span><br>bf.add <span class="hljs-built_in">key</span> value<br><span class="hljs-meta"># 多个插入</span><br>bt.madd <span class="hljs-built_in">key</span> value1 value2 value3 ...<br><span class="hljs-meta"># 查询单个key是否存在</span><br>bf.exists <span class="hljs-built_in">key</span> value<br><span class="hljs-meta"># 查询多个key是否存在</span><br>bf.mexists <span class="hljs-built_in">key</span> value1 value2 ...<br><br><span class="hljs-meta"># 自定义参数过滤器</span><br>bf.reserve <span class="hljs-built_in">key</span> error_rate initial_size<br><br><span class="hljs-meta"># error_rate 容错率 默认值为0.01 越低需要的存储空间越大 </span><br><span class="hljs-meta"># initial_size 预计放入元素数量 默认值为100 当放入的实际元素数量超过该数量，会出现误判，超过数量越大，误判越严重 </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis Notes-04</title>
    <link href="/2022/01/18/Redis%20Notes-04/"/>
    <url>/2022/01/18/Redis%20Notes-04/</url>
    
    <content type="html"><![CDATA[<h2 id="使用redis中的geohash数据结构实现附近的酒店类似功能"><a class="markdownIt-Anchor" href="#使用redis中的geohash数据结构实现附近的酒店类似功能"></a> 使用Redis中的GeoHash数据结构实现附近的酒店类似功能</h2>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQLServer-01 Index</title>
    <link href="/2021/12/08/SQLServer-01%20Index/"/>
    <url>/2021/12/08/SQLServer-01%20Index/</url>
    
    <content type="html"><![CDATA[<h2 id="不能创建索引的字段类型"><a class="markdownIt-Anchor" href="#不能创建索引的字段类型"></a> 不能创建索引的字段类型</h2><p>无法指定 ntext、 text、 image、 varchar(max) 、 nvarchar(max) 和 varbinary(max) 数据类型的列为索引键列<br />如果索引包含多个列，则应考虑列的顺序。 用于等于 (=)、大于 (&gt;)、小于 (&lt;) 或 BETWEEN 搜索条件的 WHERE 子句或者参与联接的列应该放在最前面。 其他列应该基于其非重复级别进行排序，就是说，从最不重复的列到最重复的列</p>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
      <category>SQLServer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis Notes-03</title>
    <link href="/2021/12/01/Redis%20Notes-03/"/>
    <url>/2021/12/01/Redis%20Notes-03/</url>
    
    <content type="html"><![CDATA[<h2 id="redis-事务"><a class="markdownIt-Anchor" href="#redis-事务"></a> Redis 事务</h2><p><code>Redis</code> 的命令是原子性的，而 <code>Redis</code> 的事务是非原子性的</p><h3 id="multi-命令"><a class="markdownIt-Anchor" href="#multi-命令"></a> MULTI 命令</h3><p>开启事务命令，<code>Redis</code>将操作命令逐个放到队列中，根据<code>EXEC</code>命令来原子化执行命令</p><h3 id="exec-命令"><a class="markdownIt-Anchor" href="#exec-命令"></a> EXEC 命令</h3><p>执行事务中的所有操作命令</p><h3 id="discard-命令"><a class="markdownIt-Anchor" href="#discard-命令"></a> DISCARD 命令</h3><p>取消事务命令，放弃执行事务模块中的所有命令</p><h3 id="watch-命令"><a class="markdownIt-Anchor" href="#watch-命令"></a> WATCH 命令</h3><p>监视一个 <code>key</code> 或者多个 <code>key</code> 如果在事务执行前，这些 <code>key</code> 被其他命令修改，则事务被中断，不会执行事务中的任何命令</p><h3 id="unwatch-命令"><a class="markdownIt-Anchor" href="#unwatch-命令"></a> UNWATCH 命令</h3><p>取消 <code>WATCH</code> 命令对所有 <code>key</code> 的监控</p><h3 id="事务流程"><a class="markdownIt-Anchor" href="#事务流程"></a> 事务流程</h3><h4 id="正常事务流程"><a class="markdownIt-Anchor" href="#正常事务流程"></a> 正常事务流程</h4><p>使用<code>MULTI</code> 命令开启一个事务，并且使用 <code>set</code> 命令新建两个字符串键 <code>key1</code> 和 <code>key2</code>，初始值分别为 <code>val1</code> 和 <code>val2</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs redis">127.0.0.1:6379&gt; set key1 val1<br>OK<br>127.0.0.1:6379&gt; set key2 val2<br>OK<br></code></pre></td></tr></table></figure><p>然后我们使用一个事务来修改两个 key 的值，命令为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs redis">127.0.0.1:6379&gt; MULTI<br>OK<br>127.0.0.1:6379&gt; set key1 new_val1<br>QUEUED<br>127.0.0.1:6379&gt; set key2 new_val2<br>QUEUED<br>127.0.0.1:6379&gt; EXEC<br>1) OK<br>2) OK<br></code></pre></td></tr></table></figure><p>最后我们使用<code>get</code>命令来查询我们修改的键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs redis">127.0.0.1:6379&gt; get key1<br>&quot;new_val1&quot;<br>127.0.0.1:6379&gt; get key2<br>&quot;new_val2&quot;<br>127.0.0.1:6379&gt;<br></code></pre></td></tr></table></figure><p>可以看到外面已经修改了两个键的值</p><h4 id="语法错误导致事务失败流程"><a class="markdownIt-Anchor" href="#语法错误导致事务失败流程"></a> 语法错误导致事务失败流程</h4><p>在事务开启后，其中某一条命令因为 redis 语法错误导致整个事务提交失败，key 的值不会发生改变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs redis">127.0.0.1:6379&gt; MULTI<br>OK<br>127.0.0.1:6379(TX)&gt; set key1 new_val1<br>QUEUED<br>127.0.0.1:6379(TX)&gt; sets key2 new_val2<br>(error) ERR unknown command `sets`, with args beginning with: `key2`, `new_val2`,<br>127.0.0.1:6379(TX)&gt; EXEC<br>(error) EXECABORT Transaction discarded because of previous errors.<br>127.0.0.1:6379&gt; get key1<br>&quot;val1&quot;<br>127.0.0.1:6379&gt; get key2<br>&quot;val2&quot;<br></code></pre></td></tr></table></figure><h4 id="数据类型错误导致事务失败流程"><a class="markdownIt-Anchor" href="#数据类型错误导致事务失败流程"></a> 数据类型错误导致事务失败流程</h4><p>在事务开启后，其中某一条命令因为 redis 数据类型错误导致整个事务提交失败，发生类型错误的命令的 key 的值不会发生改变，但是其他 key 会发生变化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs redis">127.0.0.1:6379&gt; MULTI<br>OK<br>127.0.0.1:6379(TX)&gt; set key1 val1<br>QUEUED<br>127.0.0.1:6379(TX)&gt; lpush key2 val2<br>QUEUED<br>127.0.0.1:6379(TX)&gt; EXEC<br>1) OK<br>2) (error) WRONGTYPE Operation against a key holding the wrong kind of value<br>127.0.0.1:6379&gt; get key1<br>&quot;val1&quot;<br>127.0.0.1:6379&gt; get key2<br>&quot;new_val2&quot;<br>127.0.0.1:6379&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode-33 Search in Rotated Sorted Array</title>
    <link href="/2021/10/26/Leetcode-33/"/>
    <url>/2021/10/26/Leetcode-33/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>整数数组 nums 按升序排列，数组中的值 互不相同 。</p><p>在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;= k &lt; nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], …, nums[n-1], nums[0], nums[1], …, nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为  [4,5,6,7,0,1,2] 。</p><p>给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回  -1 。</p><h2 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h2><h3 id="示例-1"><a class="markdownIt-Anchor" href="#示例-1"></a> 示例 1</h3><blockquote><p>输入：nums = [4,5,6,7,0,1,2], target = 0<br />输出：4</p></blockquote><h3 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例 2</h3><blockquote><p>输入：nums = [4,5,6,7,0,1,2], target = 3<br />输出：-1</p></blockquote><h3 id="示例-3"><a class="markdownIt-Anchor" href="#示例-3"></a> 示例 3</h3><blockquote><p>输入：nums = [1], target = 0<br />输出：-1</p></blockquote><h2 id="提示"><a class="markdownIt-Anchor" href="#提示"></a> 提示</h2><blockquote><p>1 &lt;= nums.length &lt;= 5000<br />-10^4 &lt;= nums[i] &lt;= 10^4<br />nums 中的每个值都 独一无二<br />题目数据保证 nums 在预先未知的某个下标上进行了旋转<br />-10^4 &lt;= target &lt;= 10^4</p></blockquote><h2 id="进阶"><a class="markdownIt-Anchor" href="#进阶"></a> 进阶</h2><p>你可以设计一个时间复杂度为 O(log n) 的解决方案吗？</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>本题主要考察在有序的数组中查找元素。看到有序数组查找，第一时间我们应该想到的是二分查找，但是二分查找针对的是整个数组都是有序的。其实，我们可以发现在数组反转后，仍然可以找到一部分是有序的数组，我们只需要判断目标值是否落在这个有序的数组部分。所以我们需要做两个判断，首先判断拆分后的数组，哪一个部分是有序的以及目标值是否在此区间内，即</p><ol><li>如果[l, mid - 1]是有序的且 target 在[nums[l],nums[mid]]范围内，则搜索范围缩小到[l, mid - 1],反之则在[mid+1, ,r]中查找</li><li>如果[mid, r]是有序的且 target 在[nums[mid + 1], nums[r]]范围内，则搜索范围缩小到[mid + 1, r]，反之则在[l, mid - 1]中查找</li></ol><p>这里判断哪个部分是否有序，只需要取中间元素和首尾元素进行比较就行了。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Search</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] nums, <span class="hljs-built_in">int</span> target</span>)</span> &#123;<br>        <span class="hljs-built_in">int</span> n = nums.Length;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-comment">// 空的数组</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) <span class="hljs-comment">// 只有一个元素</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>] == target ? <span class="hljs-number">0</span> : <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-built_in">int</span> l = <span class="hljs-number">0</span>, r = n - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt;= r)<br>        &#123;<br>            <span class="hljs-built_in">int</span> mid = l + (r - l) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[mid] == target)<br>            &#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (nums[<span class="hljs-number">0</span>] &lt;= nums[mid]) <span class="hljs-comment">// 左边部分有序</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (nums[<span class="hljs-number">0</span>] &lt;= target &amp;&amp; target &lt; nums[mid])<br>                &#123;<br>                    r = mid - <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    l = mid + <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[n - <span class="hljs-number">1</span>])<br>                &#123;<br>                    l = mid + <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    r = mid - <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++ 代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>      <span class="hljs-type">int</span> n = (<span class="hljs-type">int</span>)nums.<span class="hljs-built_in">size</span>();<br>      <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>] == target ? <span class="hljs-number">0</span> : <span class="hljs-number">-1</span>;<br>      &#125;<br>      <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = n - <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>        <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>          <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (nums[<span class="hljs-number">0</span>] &lt;= nums[mid]) &#123;<br>          <span class="hljs-keyword">if</span> (nums[<span class="hljs-number">0</span>] &lt;= target &amp;&amp; target &lt; nums[mid]) &#123;<br>            r = mid - <span class="hljs-number">1</span>;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            l = mid + <span class="hljs-number">1</span>;<br>          &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[n - <span class="hljs-number">1</span>]) &#123;<br>            l = mid + <span class="hljs-number">1</span>;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            r = mid - <span class="hljs-number">1</span>;<br>          &#125;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Python 代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>      <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">      33. Search in Rotated Sorted Array</span><br><span class="hljs-string">      &quot;&quot;&quot;</span><br>      n = <span class="hljs-built_in">len</span>(nums)<br>      <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>          <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>      <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:<br>          <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> nums[<span class="hljs-number">0</span>] == target <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span><br>      l = <span class="hljs-number">0</span><br>      r = n - <span class="hljs-number">1</span><br>      <span class="hljs-keyword">while</span> l &lt;= r:<br>          mid = l + (r - l) // <span class="hljs-number">2</span><br>          <span class="hljs-keyword">if</span> nums[mid] == target:<br>              <span class="hljs-keyword">return</span> mid<br>          <span class="hljs-keyword">if</span> nums[<span class="hljs-number">0</span>] &lt;= nums[mid]:<br>              <span class="hljs-keyword">if</span> nums[<span class="hljs-number">0</span>] &lt;= target <span class="hljs-keyword">and</span> target &lt; nums[mid]:<br>                  r = mid - <span class="hljs-number">1</span><br>              <span class="hljs-keyword">else</span>:<br>                  l = mid + <span class="hljs-number">1</span><br>          <span class="hljs-keyword">else</span>:<br>              <span class="hljs-keyword">if</span> nums[mid] &lt; target <span class="hljs-keyword">and</span> target &lt;= nums[n - <span class="hljs-number">1</span>]:<br>                  l = mid + <span class="hljs-number">1</span><br>              <span class="hljs-keyword">else</span>:<br>                  r = mid - <span class="hljs-number">1</span><br>      <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>C 代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numSize, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-keyword">if</span> (numSize &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(numSize == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>] ==  target ? <span class="hljs-number">0</span> : <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = numSize - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(l &lt;= r) &#123;<br>        <span class="hljs-type">int</span> mid = l + (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(nums[mid] == target) &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(nums[<span class="hljs-number">0</span>] &lt;= nums[mid]) &#123;<br>            <span class="hljs-keyword">if</span>(nums[<span class="hljs-number">0</span>] &lt;= target &amp;&amp; target &lt; nums[mid]) &#123;<br>                r = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                l = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span>(nums[mid] &lt; target &amp;&amp; target &lt;= nums[numSize - <span class="hljs-number">1</span>]) &#123;<br>                l = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                r = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithms</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rust-03 Function</title>
    <link href="/2020/10/26/Rust-03%20Function/"/>
    <url>/2020/10/26/Rust-03%20Function/</url>
    
    <content type="html"><![CDATA[<h2 id="function"><a class="markdownIt-Anchor" href="#function"></a> Function</h2><p>Rust 和 C/C++一样必须有一个名称为 main 的函数，作为程序的入口，Rust 的函数使用关键字<code>fn</code>声明。Rust 约定使用<code>snake case</code>的代码风格命名 function 和 variable 的名称。</p><p>例子</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-title function_ invoke__">another_function</span>();<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">another_function</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Another function.&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>Rust</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Programming Language</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rust-02 Data Types</title>
    <link href="/2020/10/23/Rust-02%20Data%20Types/"/>
    <url>/2020/10/23/Rust-02%20Data%20Types/</url>
    
    <content type="html"><![CDATA[<h2 id="integer-number"><a class="markdownIt-Anchor" href="#integer-number"></a> Integer Number</h2><table><thead><tr><th style="text-align:left">长度</th><th style="text-align:left">有符号</th><th style="text-align:left">无符号</th></tr></thead><tbody><tr><td style="text-align:left">8-bit</td><td style="text-align:left">i8</td><td style="text-align:left">u8</td></tr><tr><td style="text-align:left">16-bit</td><td style="text-align:left">i16</td><td style="text-align:left">u16</td></tr><tr><td style="text-align:left">32-bit</td><td style="text-align:left">i32</td><td style="text-align:left">u32</td></tr><tr><td style="text-align:left">64-bit</td><td style="text-align:left">i64</td><td style="text-align:left">u64</td></tr><tr><td style="text-align:left">128-bit</td><td style="text-align:left">i128</td><td style="text-align:left">u128</td></tr><tr><td style="text-align:left">arch</td><td style="text-align:left">isize</td><td style="text-align:left">usize</td></tr></tbody></table><p>最后的 isize 和 usize 会自动基于当前运行平台如果是 64 位系统就是 i64 和 u64，32 位系统则是 i32 和 u32。Rust 默认整型为 i32。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">2</span>; <span class="hljs-comment">// i32</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span>: <span class="hljs-type">i64</span> = <span class="hljs-number">3</span>; <span class="hljs-comment">// i64</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="integer-literal"><a class="markdownIt-Anchor" href="#integer-literal"></a> Integer Literal</h2><table><thead><tr><th style="text-align:left">字面值</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td style="text-align:left">Decimal</td><td style="text-align:left">100_000</td></tr><tr><td style="text-align:left">Hex</td><td style="text-align:left">0xff</td></tr><tr><td style="text-align:left">Octal</td><td style="text-align:left">0o77</td></tr><tr><td style="text-align:left">Binary</td><td style="text-align:left">0b1111_0000</td></tr><tr><td style="text-align:left">Byte(u8 only)</td><td style="text-align:left">b’A’</td></tr></tbody></table><h2 id="float-point-number"><a class="markdownIt-Anchor" href="#float-point-number"></a> Float Point Number</h2><table><thead><tr><th style="text-align:left">长度</th><th style="text-align:left">类型名</th></tr></thead><tbody><tr><td style="text-align:left">32-bit</td><td style="text-align:left">f32</td></tr><tr><td style="text-align:left">64-bit</td><td style="text-align:left">f64</td></tr></tbody></table><p>Rust 默认浮点数类型为 f64。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">2.0</span>; <span class="hljs-comment">// f64</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span>: <span class="hljs-type">f32</span> = <span class="hljs-number">3.0</span>; <span class="hljs-comment">// f32</span><br>    <span class="hljs-comment">// 支持的操作</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">sum</span> = <span class="hljs-number">5.3</span> + <span class="hljs-number">10.7</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">difference</span> = <span class="hljs-number">95.5</span> - <span class="hljs-number">5.5</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">product</span> = <span class="hljs-number">5.13</span> * <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">quotient</span> = <span class="hljs-number">152.4</span> / <span class="hljs-number">22.2</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">remainder</span> = <span class="hljs-number">25</span> % <span class="hljs-number">4</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="boolean"><a class="markdownIt-Anchor" href="#boolean"></a> Boolean</h2><p>Rust 的 Boolean 类型大小为 1 byte</p><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">类型名</th></tr></thead><tbody><tr><td style="text-align:left">真</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">假</td><td style="text-align:left">false</td></tr></tbody></table><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">t</span> = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">f</span>: <span class="hljs-type">bool</span> = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 使用类型名显示声明</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="character"><a class="markdownIt-Anchor" href="#character"></a> Character</h2><p>Rust 的字符是一个 4 bytes 的 Unicode Scalar Value</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">c</span> = <span class="hljs-string">&#x27;z&#x27;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">dog</span> = &#x27;🐶&#x27;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="tuple"><a class="markdownIt-Anchor" href="#tuple"></a> Tuple</h2><p>Rust 的元组长度固定，一旦声明后大小不能增长和收缩。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">tup</span>: (<span class="hljs-type">i32</span>, <span class="hljs-type">f64</span>, <span class="hljs-type">u8</span>) = (<span class="hljs-number">500</span>, <span class="hljs-number">6.4</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">let</span> (x, y, z) = tup;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The value of y is &#123;&#125;&quot;</span>, y);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">five_hundred</span> = tup.<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">six_point_four</span> = tup.<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">one</span> = tup.<span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="array"><a class="markdownIt-Anchor" href="#array"></a> Array</h2><p>固定长度</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">b</span>: [<span class="hljs-type">i32</span>; <span class="hljs-number">5</span>] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">array</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span>: [<span class="hljs-type">i32</span>; <span class="hljs-number">5</span>] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">elememt</span> = array[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">index</span> = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">element2</span> = arr[index];   <span class="hljs-comment">// 访问数组元素 数组索引是0开头</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Rust 中声明变量的方式是<code>let [mut] variablename : typename = initialvalue;</code></p>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>Rust</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Programming Language</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rust-01 Get Started</title>
    <link href="/2020/10/20/Rust-01%20Get%20Started/"/>
    <url>/2020/10/20/Rust-01%20Get%20Started/</url>
    
    <content type="html"><![CDATA[<h2 id="11-installation"><a class="markdownIt-Anchor" href="#11-installation"></a> 1.1 Installation</h2><p>The first thing to install Rust. We will download Rust through <code>rustup</code>, a command line tool for managing Rust versions and associated tools. You will need an internet connection for the download. You can down <code>rsutup</code> from <a href="https://www.rust-lang.org/">Rust Official Web Site</a>.<br />After you install the <code>rustup</code> following installation guide, you can open a command line tool like bash in Linux/Max OS or powershell in Windows. Type <code>rustup --version</code>. If no errors encountered, you will see result like<br /><img src="../img/bg/rust-01/rust-01-12.png" alt="rustc 版本命令截图" /></p><blockquote><p>We recommend <a href="https://github.com/PowerShell/PowerShell">PowerShell Core</a> and <a href="https://github.com/microsoft/terminal">Windows Terminal</a> in Windows</p></blockquote><p>安装好 rust 后，我们需要了解几个东西</p><h2 id="12-rustc"><a class="markdownIt-Anchor" href="#12-rustc"></a> 1.2 rustc</h2><p><code>rustc</code>是 rust 的编译器，负责将 rs 文件源码编译到可运行文件或者库的二进制代码</p><h2 id="13-rustup"><a class="markdownIt-Anchor" href="#13-rustup"></a> 1.3 rustup</h2><p><code>rustup</code>是 rust 的升级管理工具，负责升级 rust 的版本，常用命令<code>rustup update</code>用来升级 rust</p><h2 id="14-cargo"><a class="markdownIt-Anchor" href="#14-cargo"></a> 1.4 cargo</h2><p>一般都不直接使用<code>rustc</code>来直接编译 rs 文件，而是选择<code>cargo</code>。 <code>cargo</code>是 Rust 的包管理器，可以用来创建项目、安装依赖、类型检测、编译、运行以及测试项目等功能。cargo<code>是一个功能强大的工具。</code>cargo run<code>能够自动化调用</code>rustc` 对 rs 文件进行编译产出二进制文件并运行二进制文件。</p><h3 id="common-cargo-commands"><a class="markdownIt-Anchor" href="#common-cargo-commands"></a> common cargo commands</h3><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">说明</th><th style="text-align:left">示例</th></tr></thead><tbody><tr><td style="text-align:left">cargo new</td><td style="text-align:left">创建项目，默认创建 binary 项目，添加参数可以选择 lib 和 bin 两种项目</td><td style="text-align:left">cargo new hello --lib(默认–bin)</td></tr><tr><td style="text-align:left">cargo check</td><td style="text-align:left">类型检测</td><td style="text-align:left">cargo check</td></tr><tr><td style="text-align:left">cargo build</td><td style="text-align:left">编译项目</td><td style="text-align:left">cargo build [–release]</td></tr><tr><td style="text-align:left">cargo run</td><td style="text-align:left">运行项目，可以带参数</td><td style="text-align:left">cargo run [–release]</td></tr><tr><td style="text-align:left">cargo test</td><td style="text-align:left">对项目进行单元测试</td><td style="text-align:left">cargo test</td></tr></tbody></table><p>详细的说明可以查看<a href="https://doc.rust-lang.org/cargo/index.html">官方文档</a>。</p><h2 id="15-ide"><a class="markdownIt-Anchor" href="#15-ide"></a> 1.5 IDE</h2><p>现在能够开发 rust 的工具已经有很多了，比如 Jetbrains 家的<a href="https://www.jetbrains.com/idea/">Idea</a>（需要添加 rust 插件）以及 <a href="">VS Code</a></p><h2 id="16-hello-world"><a class="markdownIt-Anchor" href="#16-hello-world"></a> 1.6 Hello World!</h2><p>既然已经有了 rust 的运行环境，那么我们便开始创建第一个 rust 项目。使用<code>cargo new hello-world</code>命令创建一个名为<code>hello-world</code>的项目，然后<code>cd hello-world</code>进入项目目录后可以看到项目的结构</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust">C:.<br>│  .gitignore<br>│  Cargo.toml<br>│<br>└─src<br>        main.rs<br></code></pre></td></tr></table></figure><p>项目根路径会有一个<code>Cargo.toml</code>和一个<code>src\main.rs</code>，其中<code>Cargo.toml</code>文件是负责配置 cargo 和项目依赖项，<a href="http://main.rs">main.rs</a> 文件则是程序的入口点，<a href="http://main.rs">main.rs</a> 里的代码</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Hello, world!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>简单易懂，关键字<code>fn</code>用来声明这是一个无返回值名称为<code>main</code>的 function，然后函数体内调用 rust 的输出宏<code>println!</code>输出了<code>Hello, world!</code></p><blockquote><p>在 Rust 中所有的函数调用都是必须有返回值的表达式，无返回值的返回一个空的 tuple 表示或者省略不写。</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">foo</span>() <span class="hljs-punctuation">-&gt;</span> () &#123;&#125;<br><span class="hljs-comment">// 二者等效</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">foo</span>() &#123;&#125;<br></code></pre></td></tr></table></figure><p>我们运行<code>cargo build</code>，对项目进行编译，默认情况下是生成带有 debug 信息并且没有优化的代码，可以得到下图所示内容</p><p><img src="/img/bg/rust-01/rust-01-1.png" alt="cargo build的命令截图" /></p><p>而添加<code>--release</code>参数后，则会生成不带 debug 信息且优化后的代码，如下图所示（这一般是在正式发布时使用）</p><p><img src="/img/bg/rust-01/rust-01-2.png" alt="cargo build --release的命令截图" /></p><p>执行<code>cargo build</code>命令后会在项目目录下生成一个 target 文件夹，target 文件夹中的内容就是编译生成的结果。根据<code>cargo build</code>后面添加的参数会生成两个文件夹，即<code>release</code>和<code>debug</code>。</p><p><img src="/img/bg/rust-01/rust-01-3.png" alt="cargo build 生成文件夹截图" /></p><p>也可以直接运行<code>cargo run</code>命令直接运行项目，这个命令就相当于<code>cargo build &amp;&amp; ./debug/hello-world.exe</code>先编译项目然后再执行编译后的可执行文件。和<code>cargo build</code>一样默认是生成 debug 代码，带上<code>--release</code>参数后则是 release 代码。<br />下图是<code>cargo run</code>所显示信息</p><p><img src="/img/bg/rust-01/rust-01-4.png" alt="cargo run默认截图" /></p><p>下图是<code>cargo run --release</code>所显示信息</p><p><img src="/img/bg/rust-01/rust-01-5.png" alt="cargo run release截图" /></p><h2 id="依赖项"><a class="markdownIt-Anchor" href="#依赖项"></a> 依赖项</h2><p>在项目文件夹中找到<code>Cargo.toml</code>文件，这个文件便是 Rust 项目的依赖项配置文件<br /><img src="/img/bg/rust-01/rust-01-6.png" alt="cargo.toml配置文件截图" /><br />在这个文件里对项目进行配置，比如我现在需要使用随机数，那么我只需要在<code>[dependencies]</code>下面添加<code>rand = &quot;0.8.3&quot;</code>，然后项目运行时，cargo 会自己进行依赖还原，将详细的包写入<code>Cargo.lock</code>文件中</p><p><img src="/img/bg/rust-01/rust-01-7.png" alt="cargo.lock文件截图" />并且会自动去解析引入包的依赖，这和 npm 相似。</p><h2 id="猜数字游戏"><a class="markdownIt-Anchor" href="#猜数字游戏"></a> 猜数字游戏</h2><p>我们现在可以写一个小游戏来走一遍 Rust 项目创建到运行的流程<br />使用<code>cargo new</code>创建一个新的项目，然后在<code>Cargo.toml</code>文件中的<code>[dependencies]</code>下面添加<code>rand = &quot;0.8.3&quot;</code></p><p>打开<code>main.rs</code>，并添加以下代码</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> rand::Rng;<br><span class="hljs-keyword">use</span> std::cmp::Ordering;<br><span class="hljs-keyword">use</span> std::io;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">guess</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Guess the number!&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">secret_number</span> = rand::<span class="hljs-title function_ invoke__">thread_rng</span>().<span class="hljs-title function_ invoke__">gen_range</span>(<span class="hljs-number">1</span>..<span class="hljs-number">101</span>);<br>    <span class="hljs-keyword">loop</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Please input your guess.&quot;</span>);<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">buffer</span> = String::<span class="hljs-title function_ invoke__">new</span>();<br>        io::<span class="hljs-title function_ invoke__">stdin</span>()<br>            .<span class="hljs-title function_ invoke__">read_line</span>(&amp;<span class="hljs-keyword">mut</span> buffer)<br>            .<span class="hljs-title function_ invoke__">expect</span>(<span class="hljs-string">&quot;Failed to read line!&quot;</span>);<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">number</span>: <span class="hljs-type">i32</span> = <span class="hljs-keyword">match</span> buffer.<span class="hljs-title function_ invoke__">trim</span>().<span class="hljs-title function_ invoke__">parse</span>() &#123;<br>            <span class="hljs-title function_ invoke__">Ok</span>(num) =&gt; num,<br>            <span class="hljs-title function_ invoke__">Err</span>(_) =&gt; <span class="hljs-keyword">continue</span>,<br>        &#125;;<br>        <span class="hljs-keyword">match</span> number.<span class="hljs-title function_ invoke__">cmp</span>(&amp;secret_number) &#123;<br>            Ordering::Less =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Too small!&quot;</span>),<br>            Ordering::Greater =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Too big!&quot;</span>),<br>            Ordering::Equal =&gt; &#123;<br>                <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;You win!&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-title function_ invoke__">guess</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这些代码也很容易理解。<code>use std::io;</code>、<code>use std::cmp::Ordering;</code>和<code>use rand::Rng;</code>分别引入我们需要的模块。<br /><code>std::io</code>用来获取输入的数字，<code>std::cmp::Ordering</code>用来比较输入的数字和随机数的大小，<code>rand::Rng</code>用来生成随机数。<br />然后我们声明了一个无参数和无返回值的函数 <code>guess</code>。函数里主要是输出一行提示用户输入的提示信息和生成范围在[1,101)的随机整数，并根据用户输入的数字与随机数进行比较，直到用户猜测数字等于随机数字后结束程序。<br />我们需要处理用户的输入，在 rust 中使用<code>io::stdin().read_line()</code>从标准输入流中获取用户的输入，因为<code>read_line()</code>返回的是<code>Result&lt;usize&gt;</code>，在 rust 中<code>Result&lt;T&gt;</code>都可以使用 match（模式匹配）来对结果进行处理。<code>loop</code>在 rust 中是开启一个无线循环，根据内部的 break 来跳出循环，这里我们根据用户输入的数字和产生的随机数字比较结果作为是否结束循环的条件。在 rust 中，我们需要着重的学习<code>match</code>模式匹配，这里<code>number.cmp</code>返回一个<code>Ordering</code>，我们可以根据不同的结果进行不同处理，这和 if 条件判断类似，但是代码的可读性变高了，更利于理解，在 rust 中尽量使用模式匹配来进行逻辑判断以便减少 bug。<code>main</code>函数就是简单地调用<code>guess</code>函数。</p><p>使用<code>cargo run</code>后，我们会得到以下信息<br /><img src="/img/bg/rust-01/rust-01-9.png" alt="猜数字游戏截图" /></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>至此，我们了解了 rust 的安装和各种命令以及创建并运行一个 rust 项目的所有流程。</p>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>Rust</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Programming Language</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C-05 Control Flow</title>
    <link href="/2020/10/12/C-05%20Control%20Flow/"/>
    <url>/2020/10/12/C-05%20Control%20Flow/</url>
    
    <content type="html"><![CDATA[<h2 id="二分搜索bsearch"><a class="markdownIt-Anchor" href="#二分搜索bsearch"></a> 二分搜索（bsearch）</h2><p>C 标准库实现了二分搜索的函数 bsearch</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">bsearch</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *key, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *ptr,</span><br><span class="hljs-params">              <span class="hljs-type">size_t</span> count, <span class="hljs-type">size_t</span> size,</span><br><span class="hljs-params">              <span class="hljs-type">int</span> (*comp)(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *))</span>;<br></code></pre></td></tr></table></figure><h3 id="参数"><a class="markdownIt-Anchor" href="#参数"></a> 参数</h3><table><thead><tr><th style="text-align:center">参数名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">key</td><td style="text-align:center">指向要查找的元素的指针</td></tr><tr><td style="text-align:center">ptr</td><td style="text-align:center">指向要检验的数组的指针</td></tr><tr><td style="text-align:center">count</td><td style="text-align:center">数组的元素数目</td></tr><tr><td style="text-align:center">size</td><td style="text-align:center">数组每个元素的字节数</td></tr><tr><td style="text-align:center">comp</td><td style="text-align:center">比较函数，升序返回负数，降序返回正数，相等返回零，函数签名形式 <code>int cmp(const void *a, const void *b)</code></td></tr></tbody></table><h3 id="返回值"><a class="markdownIt-Anchor" href="#返回值"></a> 返回值</h3><table><thead><tr><th style="text-align:center">返回值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">null pointer</td><td style="text-align:center">在给定的数组中没有找到该元素</td></tr><tr><td style="text-align:center">指向与*key 比较相等的指针</td><td style="text-align:center">在给定的数组中找到该元素</td></tr></tbody></table><h3 id="二分搜索示例"><a class="markdownIt-Anchor" href="#二分搜索示例"></a> 二分搜索示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">// 定义带有可以比较元素的结构体</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">data</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> nr;<br>    <span class="hljs-type">char</span> <span class="hljs-type">const</span> *value;<br>&#125; Data;<br><span class="hljs-comment">// 定义比较函数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">data_cmp</span><span class="hljs-params">(<span class="hljs-type">void</span> <span class="hljs-type">const</span> *lhs, <span class="hljs-type">void</span> <span class="hljs-type">const</span> *rhs)</span><br>&#123;<br>    Data <span class="hljs-type">const</span> *<span class="hljs-type">const</span> l = lhs;<br>    Data <span class="hljs-type">const</span> *<span class="hljs-type">const</span> r = rhs;<br>    <span class="hljs-keyword">return</span> (l-&gt;nr &gt; r-&gt;nr) - (l-&gt;nr &lt; r-&gt;nr);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">// 准备数据</span><br>    Data pairs[] = &#123;<br>        &#123;<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Foo&quot;</span>&#125;,<br>        &#123;<span class="hljs-number">2</span>, <span class="hljs-string">&quot;Bar&quot;</span>&#125;,<br>        &#123;<span class="hljs-number">3</span>, <span class="hljs-string">&quot;Hello&quot;</span>&#125;,<br>        &#123;<span class="hljs-number">4</span>, <span class="hljs-string">&quot;World&quot;</span>&#125;,<br>        &#123;<span class="hljs-number">5</span>, <span class="hljs-string">&quot;Jacky&quot;</span>&#125;,<br>        &#123;<span class="hljs-number">6</span>, <span class="hljs-string">&quot;John&quot;</span>&#125;&#125;;<br><br>    Data key = &#123;.nr = <span class="hljs-number">3</span>&#125;;<br>    <span class="hljs-comment">// 调用&lt;stdlib.h&gt;中的bsearch函数，进行二分搜索查找元素</span><br>    Data <span class="hljs-type">const</span> *res = bsearch(&amp;key, pairs, <span class="hljs-keyword">sizeof</span> pairs / <span class="hljs-keyword">sizeof</span> pairs[<span class="hljs-number">0</span>],<br>                              <span class="hljs-keyword">sizeof</span> pairs[<span class="hljs-number">0</span>], data_cmp);<br>    <span class="hljs-keyword">if</span> (res)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO %d: %s\n&quot;</span>, res-&gt;nr, res-&gt;value);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO %d not found\n&quot;</span>, key.nr);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> EXIT_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译后执行结果：</p><blockquote><p>clang main.c -std=c11 -Wall -o main.out &amp;&amp; ./main.out<br />NO 3: Hello</p></blockquote><h2 id="快速排序qsort"><a class="markdownIt-Anchor" href="#快速排序qsort"></a> 快速排序（qsort）</h2><p>C 标准库实现了快速排序的函数 qsort</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">qsort</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> count, <span class="hljs-type">size_t</span> size,</span><br><span class="hljs-params">           <span class="hljs-type">int</span> (*comp)(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *))</span>;<br></code></pre></td></tr></table></figure><h3 id="参数-2"><a class="markdownIt-Anchor" href="#参数-2"></a> 参数</h3><table><thead><tr><th style="text-align:center">参数名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">ptr</td><td style="text-align:center">指向待排序的数组的指针</td></tr><tr><td style="text-align:center">count</td><td style="text-align:center">数组的元素数目</td></tr><tr><td style="text-align:center">size</td><td style="text-align:center">数组每个元素的字节数</td></tr><tr><td style="text-align:center">comp</td><td style="text-align:center">比较函数，升序返回负数，降序返回正数，相等返回零，函数签名形式 <code>int cmp(const void *a, const void *b)</code></td></tr></tbody></table><h3 id="快速排序示例"><a class="markdownIt-Anchor" href="#快速排序示例"></a> 快速排序示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">compare_ints</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *a, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *b)</span><br>&#123;<br>    <span class="hljs-type">int</span> arg1 = *(<span class="hljs-type">const</span> <span class="hljs-type">int</span> *)a;<br>    <span class="hljs-type">int</span> arg2 = *(<span class="hljs-type">const</span> <span class="hljs-type">int</span> *)b;<br>    <span class="hljs-keyword">return</span> (arg1 &gt; arg2) - (arg1 &lt; arg2);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">// 准备数据</span><br>    <span class="hljs-type">int</span> ints[] = &#123; <span class="hljs-number">-2</span>,<br>                   <span class="hljs-number">99</span>,<br>                   INT_MAX,<br>                   <span class="hljs-number">0</span>,<br>                   <span class="hljs-number">-743</span>,<br>                   <span class="hljs-number">10</span>,<br>                   <span class="hljs-number">2</span>,<br>                   <span class="hljs-number">44</span>,<br>                   INT_MIN,<br>                   <span class="hljs-number">2</span> &#125;;<br><br>    <span class="hljs-type">int</span> size = <span class="hljs-keyword">sizeof</span> ints / <span class="hljs-keyword">sizeof</span> *ints;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Unordered: &quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(i == size - <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ints[i]);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, ints[i]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 调用&lt;stdlib.h&gt;的快排算法，对数组进行排序</span><br>    qsort(ints, size, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>), compare_ints);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Ordered: &quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(i == size - <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ints[i]);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, ints[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> EXIT_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译后执行结果：</p><blockquote><p>clang main.c -std=c11 -Wall -o main.out &amp;&amp; ./main.out<br />Unordered: -2 99 2147483647 0 -743 10 2 44 -2147483648 2<br />Ordered: -2147483648 -743 -2 0 2 2 10 44 99 2147483647</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Programming Language</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C-04 Function</title>
    <link href="/2020/10/08/C-04%20Function/"/>
    <url>/2020/10/08/C-04%20Function/</url>
    
    <content type="html"><![CDATA[<h2 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h2><blockquote><p>return_type function_name(parameters) { function body }</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Programming Language</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C-03 Pointer</title>
    <link href="/2020/10/08/C-03%20Pointer/"/>
    <url>/2020/10/08/C-03%20Pointer/</url>
    
    <content type="html"><![CDATA[<h1 id="指针pointer"><a class="markdownIt-Anchor" href="#指针pointer"></a> 指针（Pointer）</h1><p>指针可谓是 C 语言的灵魂也是难点，</p><p>指针也是一个内置类型</p><p>从右向左，可以清晰分辨指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *ptr;  <span class="hljs-comment">// 声明一个指向int类型的指针变量ptr</span><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; <span class="hljs-comment">// 声明一个int类型的变量i并赋值0</span><br>ptr = &amp;i;  <span class="hljs-comment">// 将i的内存地址（非物理内存地址）赋值给ptr</span><br></code></pre></td></tr></table></figure><h2 id="指针分类"><a class="markdownIt-Anchor" href="#指针分类"></a> 指针分类</h2><h3 id="指针的指针pointer-to-pointer"><a class="markdownIt-Anchor" href="#指针的指针pointer-to-pointer"></a> 指针的指针（Pointer to pointer）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> **pp; <span class="hljs-comment">// 声明一个指向int*类型的指针变量pp</span><br></code></pre></td></tr></table></figure><h3 id="函数指针function-pointer"><a class="markdownIt-Anchor" href="#函数指针function-pointer"></a> 函数指针（Function Pointer）</h3><blockquote><p>return_type (*pointer_name)(param_type1, param_type2,…);</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Programming Language</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C-02 Variables</title>
    <link href="/2020/09/30/C-02%20Variables/"/>
    <url>/2020/09/30/C-02%20Variables/</url>
    
    <content type="html"><![CDATA[<h2 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h2><h2 id="声明变量"><a class="markdownIt-Anchor" href="#声明变量"></a> 声明变量</h2><blockquote><p>type_name variable_name;</p></blockquote><p>C 语言的基础类型包括</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">short</span> s;<br><span class="hljs-type">int</span> a;<br><span class="hljs-type">long</span> l;<br><span class="hljs-type">double</span> d;<br><span class="hljs-type">float</span> f;<br><br>mytype t; <span class="hljs-comment">// 自定义type变量</span><br></code></pre></td></tr></table></figure><h2 id="声明变量并初始化"><a class="markdownIt-Anchor" href="#声明变量并初始化"></a> 声明变量并初始化</h2><blockquote><p>type_name variable_name = initial_value;</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">short</span> s = <span class="hljs-number">22</span>;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10000</span>;<br><span class="hljs-type">long</span> l = <span class="hljs-number">1000000</span>;<br><span class="hljs-type">double</span> d = <span class="hljs-number">0.0007</span>;<br><span class="hljs-type">float</span> f = <span class="hljs-number">0.0</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Programming Language</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C-01 Get Started</title>
    <link href="/2020/09/30/C-01%20Get%20Started/"/>
    <url>/2020/09/30/C-01%20Get%20Started/</url>
    
    <content type="html"><![CDATA[<h2 id="开篇"><a class="markdownIt-Anchor" href="#开篇"></a> 开篇</h2><p>开一个坑，重新学习 C 语言，将自己学习过程记录下来。C 语言是一门面向过程的编程语言，是将问题拆分成若干个小问题分步骤进行解决编程模式。</p><h2 id="编译器"><a class="markdownIt-Anchor" href="#编译器"></a> 编译器</h2><table><thead><tr><th style="text-align:center">编译器名称</th><th style="text-align:left">说明</th><th style="text-align:left">官网</th></tr></thead><tbody><tr><td style="text-align:center">GCC</td><td style="text-align:left">GNU Compile Collection 缩写，是开源社区 GNU 开发维护的编译工具集</td><td style="text-align:left"><a href="https://www.gnu.org/software/gcc/">https://www.gnu.org/software/gcc/</a></td></tr><tr><td style="text-align:center">Clang</td><td style="text-align:left">LLVM 苹果出的编译工具链，友好的错误提示信息，建议使用</td><td style="text-align:left"><a href="https://clang.llvm.org/">https://clang.llvm.org/</a></td></tr><tr><td style="text-align:center">MSVC</td><td style="text-align:left">微软出的 C++编译器，只兼容 C++支持 C 语言的特性</td><td style="text-align:left"><a href="https://visualstudio.microsoft.com/zh-hans/downloads/">https://visualstudio.microsoft.com/zh-hans/downloads/</a></td></tr></tbody></table><p>学习 C 语言建议选择 Linux，不建议 Windows 系统。当然可以使用<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10">WSL</a></p><p>C 语言从源代码到机器码流程图：</p><pre><code class=" mermaid">graph LR    A[Source Code] --&gt; B[Compiler] -- 编译 --&gt; C[Native Code]</code></pre><p>C 语言的第一个程序 hello world</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-comment">//version 1</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, world\n&quot;</span>);<br>  <span class="hljs-keyword">return</span> EXIT_SUCCESS;<br>&#125;<br><span class="hljs-comment">// version 2</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span> &#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, world\n&quot;</span>);<br>  <span class="hljs-keyword">return</span> EXIT_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>#include &lt;stdio.h&gt;</code>是预处理语句，<code>#include</code>的作用是引用 C 语言标准库中的 stdio 库，作用和 python 中的 import、C#中的 using 一样。</p><p><code>printf(&quot;Hello, world\n&quot;);</code>是调用<code>stdio</code>库中的<code>printf</code>函数输出字符串<code>Hello, world</code>。</p><p>C 语言必须有一个 main 函数，作为程序启动入口，当然也只能有一个。<code>main</code>函数的签名在 C 标准中只有两种写法，其他的写法均是不符合标准的。</p><h2 id="clanggcc"><a class="markdownIt-Anchor" href="#clanggcc"></a> Clang/GCC</h2><blockquote><p>clang/gcc main.c -o main<br />执行编译好的文件<br />./main<br />可以得到结果<br />Hello, world</p></blockquote><h2 id="visual-studio"><a class="markdownIt-Anchor" href="#visual-studio"></a> Visual Studio</h2><p>安装 C<ins>开发选项后，新建项目-选择语言 C</ins>-控制台应用<br /><img src="/img/bg/c-01/1.png" alt="创建项目" /></p><p>修改 main.cpp 为 main.c，并修改项目属性中 C 标准为 C17<br /><img src="/img/bg/c-01/2.png" alt="修改文件后缀名" /><br /><img src="/img/bg/c-01/3.png" alt="点击项目属性" /><br /><img src="/img/bg/c-01/4.png" alt="修改C语言标准" /><br />并将上面的代码写入到 main.c 中，点击本地调试器按钮或者 F5/Ctrl+F5 快捷键，均能看到运行结果。<br /><img src="/img/bg/c-01/5.png" alt="运行结果" /></p><h2 id="ide-和手敲命令"><a class="markdownIt-Anchor" href="#ide-和手敲命令"></a> IDE 和手敲命令</h2><p>Visual Studio 等 IDE 本质上也是运行编译器命令生成相应的程序，只是为开发者自动去完成手巧命令过程，这样有好处也有坏处。好处就是这样可以让程序员能够专注于代码的逻辑和不用去繁琐敲击命令；坏处就是因为 IDE 帮助程序员执行了编译命令，没有了一套完成编译-链接-生成逻辑链，对程序员来说当出现比较底层的问题时，便无从下手解决。<br />无论哪一种方式，作为程序员都应该花时间去了解整个编译链工作原理。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>在这一章节，我们主要介绍了 C 语言的基础知识，让大家有一个大概的轮廓，到底 C 语言是一个什么东西，它主要用来做什么以及怎么做。</p>]]></content>
    
    
    <categories>
      
      <category>Tutorial</category>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Programming Language</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis Notes-02</title>
    <link href="/2020/09/22/Redis%20Notes-02/"/>
    <url>/2020/09/22/Redis%20Notes-02/</url>
    
    <content type="html"><![CDATA[<h1 id="redis-类型"><a class="markdownIt-Anchor" href="#redis-类型"></a> Redis 类型</h1><h2 id="redis-list"><a class="markdownIt-Anchor" href="#redis-list"></a> Redis List</h2><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">LPush</td><td style="text-align:center">在 List 头插入一个或多个元素</td><td style="text-align:center">LPush mylist hello</td></tr><tr><td style="text-align:center">RPush</td><td style="text-align:center">在 List 尾插入一个或多个元素</td><td style="text-align:center">RPush mylist world</td></tr><tr><td style="text-align:center">LPop</td><td style="text-align:center">获取 List 头的一个元素，并从 List 中一移除</td><td style="text-align:center">LPop mylist</td></tr><tr><td style="text-align:center">RPop</td><td style="text-align:center">获取 List 尾的一个元素，并从 List 中一移除</td><td style="text-align:center">RPop mylist</td></tr><tr><td style="text-align:center">LRange</td><td style="text-align:center">获取指定索引范围的元素</td><td style="text-align:center">LRange mylist 0 -1</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">localhost:0&gt;lpush mylist hello<br><span class="hljs-string">&quot;1&quot;</span><br>localhost:0&gt;lpush mylist world my<br><span class="hljs-string">&quot;3&quot;</span><br>localhost:0&gt;rpush mylist honey<br><span class="hljs-string">&quot;4&quot;</span><br>localhost:0&gt;lrange mylist 0 -1<br> 1)  <span class="hljs-string">&quot;my&quot;</span><br> 2)  <span class="hljs-string">&quot;world&quot;</span><br> 3)  <span class="hljs-string">&quot;hello&quot;</span><br> 4)  <span class="hljs-string">&quot;honey&quot;</span><br>localhost:0&gt;lpop mylist<br><span class="hljs-string">&quot;my&quot;</span><br>localhost:0&gt;lrange mylist  0 -1<br> 1)  <span class="hljs-string">&quot;world&quot;</span><br> 2)  <span class="hljs-string">&quot;hello&quot;</span><br> 3)  <span class="hljs-string">&quot;honey&quot;</span><br>localhost:0&gt;rpop mylist<br><span class="hljs-string">&quot;honey&quot;</span><br>localhost:0&gt;lrange mylist 0 -1<br> 1)  <span class="hljs-string">&quot;world&quot;</span><br> 2)  <span class="hljs-string">&quot;hello&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis Notes-01</title>
    <link href="/2020/09/19/Redis%20Notes-01/"/>
    <url>/2020/09/19/Redis%20Notes-01/</url>
    
    <content type="html"><![CDATA[<h1 id="redis-命令"><a class="markdownIt-Anchor" href="#redis-命令"></a> Redis 命令</h1><h2 id="创建和获取-key"><a class="markdownIt-Anchor" href="#创建和获取-key"></a> 创建和获取 key</h2><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">set</td><td style="text-align:center">创建一个名为 key 值为 value 键值对</td><td style="text-align:center">set views 10</td></tr><tr><td style="text-align:center">get</td><td style="text-align:center">获取名为 key 的值，存在返回值，不存在返回 nil</td><td style="text-align:center">get views</td></tr><tr><td style="text-align:center">mset</td><td style="text-align:center">一次创建多个键值对</td><td style="text-align:center">mset key1 1 key2 2</td></tr><tr><td style="text-align:center">mget</td><td style="text-align:center">一次获取多个键的值</td><td style="text-align:center">mget key1 key2</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">local_host:0&gt;<span class="hljs-built_in">set</span> views 10<br><span class="hljs-string">&quot;OK&quot;</span><br>local_host:0&gt;get views<br><span class="hljs-string">&quot;10&quot;</span><br>local_host:0&gt;mset key1 1 key2 2 key3 3<br><span class="hljs-string">&quot;OK&quot;</span><br>local_host:0&gt;mget key1 key2 key3<br> 1)  <span class="hljs-string">&quot;1&quot;</span><br> 2)  <span class="hljs-string">&quot;2&quot;</span><br> 3)  <span class="hljs-string">&quot;3&quot;</span><br></code></pre></td></tr></table></figure><h2 id="自增自减"><a class="markdownIt-Anchor" href="#自增自减"></a> 自增自减</h2><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">incr</td><td style="text-align:center">自增 key 的 value</td><td style="text-align:center">incr views</td></tr><tr><td style="text-align:center">decr</td><td style="text-align:center">自减 key 的 value</td><td style="text-align:center">decr views</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">local_host:0&gt;incr views<br><span class="hljs-string">&quot;11&quot;</span><br>local_host:0&gt;decr views<br><span class="hljs-string">&quot;10&quot;</span><br></code></pre></td></tr></table></figure><h2 id="带步进自增自减"><a class="markdownIt-Anchor" href="#带步进自增自减"></a> 带步进自增自减</h2><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">incrby</td><td style="text-align:center">有步进增加 key 的 value</td><td style="text-align:center">incrby views 2</td></tr><tr><td style="text-align:center">decrby</td><td style="text-align:center">有步进减少 key 的 value</td><td style="text-align:center">decrby views 2</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">local_host:0&gt;incrby views 2<br><span class="hljs-string">&quot;12&quot;</span><br>local_host:0&gt;decrby views 2<br><span class="hljs-string">&quot;10&quot;</span><br></code></pre></td></tr></table></figure><h2 id="判断一个-key-是否存在"><a class="markdownIt-Anchor" href="#判断一个-key-是否存在"></a> 判断一个 key 是否存在</h2><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">exists</td><td style="text-align:center">判断一个 key 是否存在</td><td style="text-align:center">exists views</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">local_host:0&gt;exists views<br><span class="hljs-string">&quot;1&quot;</span><br>local_host:0&gt;exists key4<br><span class="hljs-string">&quot;0&quot;</span><br></code></pre></td></tr></table></figure><h2 id="设置-key-过期时间支持秒和毫秒"><a class="markdownIt-Anchor" href="#设置-key-过期时间支持秒和毫秒"></a> 设置 key 过期时间（支持秒和毫秒）</h2><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">expire</td><td style="text-align:center">设置 key 过期时间</td><td style="text-align:center">expire key2 5</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">local_host:0&gt;expire key2 5<br><span class="hljs-string">&quot;1&quot;</span><br>local_host:0&gt;get key2<br><span class="hljs-string">&quot;2&quot;</span><br><span class="hljs-comment"># after 5 seconds</span><br>local_host:0&gt;get key2<br>null<br></code></pre></td></tr></table></figure><h2 id="删除某个-key"><a class="markdownIt-Anchor" href="#删除某个-key"></a> 删除某个 key</h2><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">del</td><td style="text-align:center">删除某个 key</td><td style="text-align:center">del key3</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">local_host:0&gt;del key3<br><span class="hljs-string">&quot;1&quot;</span><br></code></pre></td></tr></table></figure><h2 id="查询-value-的类型"><a class="markdownIt-Anchor" href="#查询-value-的类型"></a> 查询 value 的类型</h2><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">type</td><td style="text-align:center">查看 key 的存储的类型</td><td style="text-align:center">type views</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">local_host:0&gt;<span class="hljs-built_in">type</span> views<br><span class="hljs-string">&quot;string&quot;</span><br></code></pre></td></tr></table></figure><h2 id="模式匹配查询-key"><a class="markdownIt-Anchor" href="#模式匹配查询-key"></a> 模式匹配查询 key</h2><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">keys</td><td style="text-align:center">根据模式匹配查询 key</td><td style="text-align:center">keys *</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">local_host:0&gt;keys *<br> 1)  <span class="hljs-string">&quot;key3&quot;</span><br> 2)  <span class="hljs-string">&quot;views&quot;</span><br> 3)  <span class="hljs-string">&quot;key2&quot;</span><br> 4)  <span class="hljs-string">&quot;key1&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode-468 Valid IP Address</title>
    <link href="/2020/08/11/Leetcode-468/"/>
    <url>/2020/08/11/Leetcode-468/</url>
    
    <content type="html"><![CDATA[<h2 id="验证-ip-地址valid-ip-address"><a class="markdownIt-Anchor" href="#验证-ip-地址valid-ip-address"></a> 验证 IP 地址（Valid IP Address）</h2><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>编写一个函数来验证输入的字符串是否是有效的 IPv4 或  IPv6 地址。</p><p>IPv4  地址由十进制数和点来表示，每个地址包含 4 个十进制数，其范围为  0 - 255，  用<code>(&quot;.&quot;)</code>分割。比如，<code>172.16.254.1</code>；</p><p>同时，IPv4 地址内的数不会以 <code>0</code> 开头。比如，地址  <code>172.16.254.01</code> 是不合法的。</p><p>IPv6  地址由 8 组 16 进制的数字来表示，每组表示  16 比特。这些组数字通过 <code>(&quot;:&quot;)</code>分割。<br />比如,  <code>2001:0db8:85a3:0000:0000:8a2e:0370:7334</code> 是一个有效的地址。而且，我们可以加入一些以 0 开头的数字，字母可以使用大写，也可以是小写。所以， <code>2001:db8:85a3:0:0:8A2E:0370:7334</code>也是一个有效的 IPv6 address 地址 (即，忽略 0 开头，忽略大小写)。</p><p>然而，我们不能因为某个组的值为 <code>0</code>，而使用一个空的组，以至于出现 <code>(::)</code> 的情况。  比如， <code>2001:0db8:85a3::8A2E:0370:7334</code> 是无效的 IPv6 地址。</p><p>同时，在 IPv6 地址中，多余的 <code>0</code> 也是不被允许的。比如， <code>02001:0db8:85a3:0000:0000:8a2e:0370:7334</code> 是无效的。</p><h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3><h4 id="示例-1"><a class="markdownIt-Anchor" href="#示例-1"></a> 示例 1</h4><blockquote><p>输入: “172.16.254.1”<br />输出: “IPv4”<br />解释: 这是一个有效的 IPv4 地址, 所以返回 “IPv4”。</p></blockquote><h4 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例 2</h4><blockquote><p>输入: “2001:0db8:85a3:0:0:8A2E:0370:7334”<br />输出: “IPv6”<br />解释: 这是一个有效的 IPv6 地址, 所以返回 “IPv6”。</p></blockquote><h4 id="示例-3"><a class="markdownIt-Anchor" href="#示例-3"></a> 示例 3</h4><blockquote><p>输入: “256.256.256.256”<br />输出: “Neither”<br />解释: 这个地址既不是 IPv4 也不是 IPv6 地址。</p></blockquote><h3 id="分析过程"><a class="markdownIt-Anchor" href="#分析过程"></a> 分析过程：</h3><p>看到题目，首先想到就是正则表达式，无论是 IPv4 还是 IPv6 其实都是分组后每一组的规则是相同的按照相应的规则进行匹配。<br />对于 IPv4 来说，其结构为<code>A.B.C.D</code>，由三个<code>.</code>和四个<code>0-255</code>数字组成，因此存在五种情景</p><table><thead><tr><th style="text-align:center">情景</th><th style="text-align:center">说明</th><th style="text-align:center">范围</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">一位，首位可以为 0</td><td style="text-align:center">0-9</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">两位，首位不能为 0</td><td style="text-align:center">10-99</td></tr><tr><td style="text-align:center">100</td><td style="text-align:center">三位，首位不能为 0</td><td style="text-align:center">100-199</td></tr><tr><td style="text-align:center">200</td><td style="text-align:center">三位 2 开头</td><td style="text-align:center">200-249</td></tr><tr><td style="text-align:center">250</td><td style="text-align:center">三位 25 开头</td><td style="text-align:center">250-255</td></tr></tbody></table><p>这样一来正则表达式就很简单了，对于前三组为<code>([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5].)&#123;3&#125;</code>，第四组就少一个<code>.</code>即可。</p><p>同理，对于 IPv6 来说，结构为<code>A:B:C:D:E:F:G:H</code>，由七组<code>:</code>和八组 16 进制数组成，也没有限制首位不能为 0，所以 IPv6 的正则表达式为<code>(([0-9a-fA-F]&#123;1,4&#125;):)</code>，第八组少一个<code>:</code>。</p><p>C# 代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-title">ValidIPAddress</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> IP</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">string</span> ipv4_chunk = <span class="hljs-string">&quot;([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])&quot;</span>;<br>        Regex ipv4Pattern = <span class="hljs-keyword">new</span> Regex(<span class="hljs-string">&quot;^(&quot;</span> + ipv4_chunk + <span class="hljs-string">&quot;.)&#123;3&#125;&quot;</span> + ipv4_chunk + <span class="hljs-string">&quot;$&quot;</span>);<br>        <span class="hljs-built_in">string</span> ipv6_chunk = <span class="hljs-string">&quot;([0-9a-fA-F]&#123;1,4&#125;)&quot;</span>;<br>        Regex ipv6Pattern = <span class="hljs-keyword">new</span> Regex(<span class="hljs-string">@&quot;^(&quot;</span> + ipv6_chunk + <span class="hljs-string">&quot;:)&#123;7&#125;&quot;</span> + ipv6_chunk + <span class="hljs-string">&quot;$&quot;</span>);<br>        <span class="hljs-keyword">if</span>(IP.Contains(<span class="hljs-string">&#x27;.&#x27;</span>))<br>        &#123;<br>            <span class="hljs-keyword">return</span> ipv4Pattern.IsMatch(IP) ? <span class="hljs-string">&quot;IPv4&quot;</span> : <span class="hljs-string">&quot;Neither&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(IP.Contains(<span class="hljs-string">&#x27;:&#x27;</span>))<br>        &#123;<br>            <span class="hljs-keyword">return</span> ipv6Pattern.IsMatch(IP) ? <span class="hljs-string">&quot;IPv6&quot;</span> : <span class="hljs-string">&quot;Neither&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Neither&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>试一下，能跑，但是耗时 140ms,打败 1%的用户，emmmmmm…</p><p>换一个思路，其实验证每个组的逻辑是相同，我们完全可以不使用正则表达式去匹配，而是每一组去验证即可。</p><p>C# 代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-title">ValidIPAddress</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> IP</span>)</span><br>    &#123;<br><br>        <span class="hljs-keyword">if</span> (IP.Count(c =&gt; c == <span class="hljs-string">&#x27;.&#x27;</span>) == <span class="hljs-number">3</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> ValidIPv4(IP);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(IP.Count(c =&gt; c == <span class="hljs-string">&#x27;:&#x27;</span>) == <span class="hljs-number">7</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> ValidIPv6(IP);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Neither&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> <span class="hljs-title">ValidIPv4</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> IP</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">string</span>[] chunks = IP.Split(<span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> chunk <span class="hljs-keyword">in</span> chunks)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(chunk.Length == <span class="hljs-number">0</span> || chunk.Length &gt; <span class="hljs-number">3</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Neither&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (chunk[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; chunk.Length != <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Neither&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> c <span class="hljs-keyword">in</span> chunk)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">char</span>.IsNumber(c))<br>                &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Neither&quot;</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(System.Convert.ToInt32(chunk) &gt; <span class="hljs-number">255</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Neither&quot;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;IPv4&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> <span class="hljs-title">ValidIPv6</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> IP</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">string</span>[] chunks = IP.Split(<span class="hljs-string">&#x27;:&#x27;</span>);<br>        <span class="hljs-built_in">string</span> hexDigits = <span class="hljs-string">&quot;0123456789abcdefABCDEF&quot;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> chunk <span class="hljs-keyword">in</span> chunks)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (chunk.Length == <span class="hljs-number">0</span> || chunk.Length &gt; <span class="hljs-number">4</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Neither&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> c <span class="hljs-keyword">in</span> chunk)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(hexDigits.IndexOf(c) == <span class="hljs-number">-1</span>)<br>                &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Neither&quot;</span>;<br>                &#125;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;IPv6&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>嗯，104ms，提升不少。</p><p>Python 代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_valid_ip_address</span>(<span class="hljs-params">self, IP: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">valid_ipv4</span>(<span class="hljs-params">IP: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        chunks = IP.split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>        <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> chunks:<br>            length = <span class="hljs-built_in">len</span>(chunk)<br>            <span class="hljs-keyword">if</span> length == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> length &gt; <span class="hljs-number">3</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Neither&quot;</span><br>            <span class="hljs-keyword">if</span> chunk[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">and</span> length != <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Neither&quot;</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> chunk.isnumeric():<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Neither&quot;</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(chunk) &gt; <span class="hljs-number">255</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Neither&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;IPv4&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">valid_ipv6</span>(<span class="hljs-params">IP: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        chunks = IP.split(<span class="hljs-string">&#x27;:&#x27;</span>)<br>        hex_digits = <span class="hljs-string">&quot;0123456789abcdefABCDEF&quot;</span><br>        <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> chunks:<br>            length = <span class="hljs-built_in">len</span>(chunk)<br>            <span class="hljs-keyword">if</span> length == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> length &gt; <span class="hljs-number">4</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Neither&quot;</span><br>            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> chunk:<br>                <span class="hljs-keyword">if</span> hex_digits.find(c) == -<span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Neither&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;IPv6&quot;</span><br><br>    <span class="hljs-keyword">if</span> IP.count(<span class="hljs-string">&quot;.&quot;</span>) == <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">return</span> valid_ipv4(IP)<br>    <span class="hljs-keyword">elif</span> IP.count(<span class="hljs-string">&quot;:&quot;</span>) == <span class="hljs-number">7</span>:<br>        <span class="hljs-keyword">return</span> valid_ipv6(IP)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Neither&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithms</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode-25 Reverse Nodes in k-Group</title>
    <link href="/2020/04/09/Leetcode-25/"/>
    <url>/2020/04/09/Leetcode-25/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>给你一个链表，每  k  个节点一组进行翻转，请你返回翻转后的链表。<br />k  是一个正整数，它的值小于或等于链表的长度。<br />如果节点总数不是  k  的整数倍，那么请将最后剩余的节点保持原有顺序。</p><h2 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h2><blockquote><p>给你这个链表：1-&gt;2-&gt;3-&gt;4-&gt;5<br />当  k = 2 时，应当返回: 2-&gt;1-&gt;4-&gt;3-&gt;5<br />当  k = 3 时，应当返回: 3-&gt;2-&gt;1-&gt;4-&gt;5</p></blockquote><h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2><ul><li>你的算法只能使用常数的额外空间。</li><li>你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</li></ul><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>这道题可以拆分为两个步骤，首先将链表根据 k 拆分成若干组，然后每一组开始反转链表。<br />分组很简单，比如，链表为<code>[1, 2, 3, 4, 5], k = 2</code><br />先拆分成<code>[1, 2]</code> 和 <code>[3, 4, 5]</code>，<br />然后递归去拆分<code>[3, 4, 5]</code>，最终得到<code>[1, 2], [3, 4], [5]</code> 三组数据。其实会发现每拆分一组时，就可以进行链表的反转，然后将反转后的链表在与之前的组合并便能得到结果。</p><p>反转链表的代码模板</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp">ListNode prev = <span class="hljs-literal">null</span>;<br>ListNode curr = head;<br><span class="hljs-keyword">while</span>(curr != <span class="hljs-literal">null</span>)<br>&#123;<br>    ListNode next = curr.next;<br>    curr.next = prev;<br>    prev = curr;<br>    curr = next;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的 prev 节点便是我们递归一次返回处理好的链表结点。时间复杂度为 O(n)，空间复杂度为 O(1)。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><p>C# 代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">ReverseKGroup</span>(<span class="hljs-params">ListNode head, <span class="hljs-built_in">int</span> k</span>)</span><br>&#123;<br>    ListNode tmp = head;<br>    <span class="hljs-built_in">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (count &lt; k) <span class="hljs-comment">// 分组</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(tmp == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> head;<br>        tmp = tmp.next;<br>        count++;<br>    &#125;<br>    ListNode prev = ReverseKGroup(tmp, k);<br>    <span class="hljs-keyword">while</span> (count-- &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 反转链表</span><br>    &#123;<br>        ListNode next = head.next;<br>        head.next = prev;<br>        prev = head;<br>        head = next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> prev;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++ 代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseKGroup</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>        ListNode *tmp = head;<br>        <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(count &lt; k) &#123;<br>            <span class="hljs-keyword">if</span>(!tmp) &#123;<br>                <span class="hljs-keyword">return</span> head;<br>            &#125;<br>            tmp = tmp-&gt;next;<br>            count++;<br>        &#125;<br>        ListNode *prev = <span class="hljs-built_in">reverseKGroup</span>(tmp, k);<br>        <span class="hljs-keyword">while</span>(count-- &gt; <span class="hljs-number">0</span>) &#123;<br>            ListNode* next = head-&gt;next;<br>            head-&gt;next = prev;<br>            prev = head;<br>            head = next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> prev;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithms</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode-242 Valid Anagram</title>
    <link href="/2020/04/09/Leetcode-242/"/>
    <url>/2020/04/09/Leetcode-242/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</p><h2 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h2><p>示例  1:</p><blockquote><p>输入: s = “anagram”, t = “nagaram”<br />输出: true</p></blockquote><p>示例 2:</p><blockquote><p>输入: s = “rat”, t = “car”<br />输出: false</p></blockquote><h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2><p>异位词是指两个字符串所含相同字母的个数相同，你可以假设字符串只包含小写字母。</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>这道题其实就是在考察怎么统计字符出现的次数，我们可以使用数组或者 hashmap 来作为字母的容器，遍历<code>s</code>统计该字符串每个字母出现的次数，将其放到数组中存储，然后再遍历<code>t</code>，如果对应的字母出现，便将数组中的值减一，直到最后数组中的元素应该都为零，否则<code>s</code>和<code>t</code>便不是异位词。<br />其实可以再优化一下，只需要一次遍历便可以将两个字符串统计完成。因为只考虑小写字母可以使用一个 int[26]的数组作为容器，或者是 Dictionary&lt;char, int&gt;的 hashmap 作为容器去统计。只需遍历整个字符串，所以时间复杂度 O(n)；只需一个固定大小的数组，所以空间复杂度为 O(1)</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsAnagram</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s, <span class="hljs-built_in">string</span> t</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(s.Length != t.Length) <span class="hljs-comment">// 长度不相等肯定不是</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-built_in">int</span> len = s.Length;<br>    <span class="hljs-built_in">int</span>[] alpha = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">26</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        alpha[s[i] - <span class="hljs-string">&#x27;a&#x27;</span>]++;  <span class="hljs-comment">// 字母出现一次便在相应的元素下加一</span><br>        alpha[t[i] - <span class="hljs-string">&#x27;a&#x27;</span>]--;  <span class="hljs-comment">// 字母出现一次便在相应的元素下减一</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> alpha.All(x =&gt; x == <span class="hljs-number">0</span>);  <span class="hljs-comment">// 判断元素是否全为零</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithms</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode-20 	Valid Parentheses</title>
    <link href="/2020/04/09/Leetcode-20/"/>
    <url>/2020/04/09/Leetcode-20/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>给定一个只包括 ‘(’，’)’，’{’，’}’，’[’，’]’  的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><ul><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ul><p>注意空字符串可被认为是有效字符串。</p><h2 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h2><p>示例 1：</p><blockquote><p>输入: “()”<br />输出: true</p></blockquote><p>示例 2：</p><blockquote><p>输入: “()[]{}”<br />输出: true</p></blockquote><p>示例 3：</p><blockquote><p>输入: “(]”<br />输出: false</p></blockquote><p>示例 4：</p><blockquote><p>输入: “([)]”<br />输出: false</p></blockquote><p>示例 5：</p><blockquote><p>输入: “{[]}”<br />输出: true</p></blockquote><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>这道题主要考核怎么去匹配括号我们需要匹配的括号共三种<code>'()' '[]' '&#123;&#125;'</code>以及他们组合在一起的情况。如果元素是任意左括号就将其压入栈中，反之元素则为任意右括号，这个时候有几种情况</p><table><thead><tr><th style="text-align:center">情况</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">空栈</td><td style="text-align:center">栈中无元素，此时却是右括号显然是没有匹配项的</td></tr><tr><td style="text-align:center">‘)’</td><td style="text-align:center">栈顶不为’(’，给出的示例 4 告诉我们必须在左括号后立即有与之匹配的右括号才合法</td></tr><tr><td style="text-align:center">‘]’</td><td style="text-align:center">同’)’</td></tr><tr><td style="text-align:center">‘}’</td><td style="text-align:center">同’)’</td></tr></tbody></table><p>剩下一种便是括号匹配，此时我们就需要将栈顶元素弹出，继续判断下一个元素。最后判断一下栈中是否还剩余有元素，如果有则有括号没有匹配上。<br /> 只需遍历字符串所以时间复杂度为 O(n)，需要一个栈，最坏情况需要将整个字符串放到栈中（如全是左括号）故空间复杂度也为 O(n)</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">IsValid</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span><br>&#123;<br>    Stack&lt;<span class="hljs-built_in">char</span>&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;<span class="hljs-built_in">char</span>&gt;();<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-built_in">char</span> ch <span class="hljs-keyword">in</span> s)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;(&#x27;</span> || ch == <span class="hljs-string">&#x27;[&#x27;</span> || ch == <span class="hljs-string">&#x27;&#123;&#x27;</span>)<br>        &#123;<br>            stack.Push(ch); <span class="hljs-comment">// 压栈</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(stack.Count ==  <span class="hljs-number">0</span>) <span class="hljs-comment">// 空栈</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;)&#x27;</span> &amp;&amp; stack.Peek() != <span class="hljs-string">&#x27;(&#x27;</span>) <span class="hljs-comment">// ()不匹配</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;]&#x27;</span> &amp;&amp; stack.Peek() != <span class="hljs-string">&#x27;[&#x27;</span>)  <span class="hljs-comment">// []不匹配</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;&#125;&#x27;</span> &amp;&amp; stack.Peek() != <span class="hljs-string">&#x27;&#123;&#x27;</span>)  <span class="hljs-comment">// &#123;&#125;不匹配</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            stack.Pop();  <span class="hljs-comment">// 匹配上了</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> stack.Count == <span class="hljs-number">0</span>; <span class="hljs-comment">// 如果栈中还有元素则代表有多余的括号没有匹配上</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithms</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DirectX12 Notes-03</title>
    <link href="/2020/04/06/DirectX12%20Notes-03/"/>
    <url>/2020/04/06/DirectX12%20Notes-03/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么不使用-3x3-矩阵来作为变换矩阵"><a class="markdownIt-Anchor" href="#为什么不使用-3x3-矩阵来作为变换矩阵"></a> 为什么不使用 3x3 矩阵来作为变换矩阵</h1><h2 id="缩放scale"><a class="markdownIt-Anchor" href="#缩放scale"></a> 缩放（Scale）</h2><p>假设有一个向量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><msup><mo stretchy="false">)</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">u(x,y,z)^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord mathdefault">u</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>（一般使用列向量来表示一个向量）。我们将缩放操作定义为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mi>S</mi><mo stretchy="false">(</mo><msub><mi>s</mi><mi>x</mi></msub><mi>x</mi><mo separator="true">,</mo><msub><mi>s</mi><mi>y</mi></msub><mi>y</mi><mo separator="true">,</mo><msub><mi>s</mi><mi>z</mi></msub><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S(x,y,z)=S(s_xx,s_yy,s_zz)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span></span></p><p>现在需要证明一下缩放操作是一种线性变换。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>S</mi><mo stretchy="false">(</mo><mi>u</mi><mo>+</mo><mi>v</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><msub><mi>s</mi><mi>x</mi></msub><mo stretchy="false">(</mo><msub><mi>u</mi><mi>x</mi></msub><mo>+</mo><msub><mi>v</mi><mi>x</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>s</mi><mi>y</mi></msub><mo stretchy="false">(</mo><msub><mi>u</mi><mi>y</mi></msub><mo>+</mo><msub><mi>v</mi><mi>y</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>s</mi><mi>z</mi></msub><mo stretchy="false">(</mo><msub><mi>u</mi><mi>z</mi></msub><mo>+</mo><msub><mi>v</mi><mi>z</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><msub><mi>s</mi><mi>x</mi></msub><msub><mi>u</mi><mi>x</mi></msub><mo>+</mo><msub><mi>s</mi><mi>x</mi></msub><msub><mi>v</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mi>y</mi></msub><msub><mi>u</mi><mi>y</mi></msub><mo>+</mo><msub><mi>s</mi><mi>y</mi></msub><msub><mi>v</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mi>z</mi></msub><msub><mi>u</mi><mi>z</mi></msub><mo>+</mo><msub><mi>s</mi><mi>z</mi></msub><msub><mi>v</mi><mi>z</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><msub><mi>s</mi><mi>x</mi></msub><msub><mi>u</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mi>y</mi></msub><msub><mi>u</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mi>z</mi></msub><msub><mi>u</mi><mi>z</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><msub><mi>s</mi><mi>x</mi></msub><msub><mi>v</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mi>y</mi></msub><msub><mi>v</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mi>z</mi></msub><msub><mi>v</mi><mi>z</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>S</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo><mo>+</mo><mi>S</mi><mo stretchy="false">(</mo><mi>v</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}S(u+v)&amp; = (s_x(u_x+v_x),s_y(u_y+v_y),s_z(u_z+v_z))        \\&amp; = (s_xu_x+s_xv_x,s_yu_y+s_yv_y,s_zu_z+s_zv_z)     \\&amp; = (s_xu_x,s_yu_y,s_zu_z) + (s_xv_x,s_yv_y,s_zv_z) \\&amp; = S(u)+S(v)\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6em;vertical-align:-2.7500000000000004em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.4099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-0.9099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-2.4099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-0.9099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>S</mi><mo stretchy="false">(</mo><mi>k</mi><mi>u</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><msub><mi>s</mi><mi>x</mi></msub><mi>k</mi><msub><mi>u</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mi>y</mi></msub><mi>k</mi><msub><mi>u</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mi>z</mi></msub><mi>k</mi><msub><mi>u</mi><mi>z</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>k</mi><mi>S</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}S(ku)&amp; = (s_xku_x,s_yku_y,s_zku_z) \\&amp; = kS(u)\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000000000000004em;vertical-align:-1.2500000000000002em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">u</span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>有以上推导可知，缩放变换是一种线性变换。<br />我们可以将<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>拆分成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>x</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><msup><mo stretchy="false">)</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">u_x(x,0,0)^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>y</mi></msub><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mn>0</mn><msup><mo stretchy="false">)</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">u_y(0,y,0)^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1274389999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>z</mi></msub><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mi>z</mi><msup><mo stretchy="false">)</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">u_z(0,0,z)^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>。那么<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mo>=</mo><msub><mi>u</mi><mi>x</mi></msub><mo>+</mo><msub><mi>u</mi><mi>y</mi></msub><mo>+</mo><msub><mi>u</mi><mi>z</mi></msub></mrow><annotation encoding="application/x-tex">u=u_x+u_y+u_z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8694379999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，我们对三个基坐标进行缩放也就是三个分量分别进行放大或缩小，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>x</mi></msub><msub><mi>s</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">u_xs_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>y</mi></msub><msub><mi>s</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">u_ys_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>z</mi></msub><msub><mi>s</mi><mi>z</mi></msub></mrow><annotation encoding="application/x-tex">u_zs_z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，便可以得到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mo>=</mo><msub><mi>s</mi><mi>x</mi></msub><msub><mi>u</mi><mi>x</mi></msub><mo>+</mo><msub><mi>s</mi><mi>y</mi></msub><msub><mi>u</mi><mi>y</mi></msub><mo>+</mo><msub><mi>s</mi><mi>z</mi></msub><msub><mi>u</mi><mi>z</mi></msub></mrow><annotation encoding="application/x-tex">u=s_xu_x+s_yu_y+s_zu_z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8694379999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，将三个分量的向量组合成一个矩阵，便可以得到</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>z</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>s</mi><mi>x</mi></msub><mi>x</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>s</mi><mi>y</mi></msub><mi>y</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>s</mi><mi>z</mi></msub><mi>z</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\left[    \begin{array}{ccc}    s_x &amp; 0   &amp; 0 \\    0   &amp; s_y &amp; 0 \\    0   &amp; 0   &amp; s_z    \end{array}\right] \left[    \begin{array}{c}    x \\    y \\    z    \end{array}\right] = \left[    \begin{array}{c}    s_xx \\    s_yy \\    s_zz    \end{array}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>所以缩放变换对应的矩阵是</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mrow><mi>s</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi>e</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>z</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">M_{scale} = \left[    \begin{array}{ccc}    s_x &amp; 0   &amp; 0 \\    0   &amp; s_y &amp; 0 \\    0   &amp; 0   &amp; s_z    \end{array}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">s_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">s_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>z</mi></msub></mrow><annotation encoding="application/x-tex">s_z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>分别对应三个基方向的缩放比例。</p><h2 id="旋转rotation"><a class="markdownIt-Anchor" href="#旋转rotation"></a> 旋转（Rotation）</h2><p>同样的我们需要证明旋转是一种线性变换。</p><h2 id="平移translate"><a class="markdownIt-Anchor" href="#平移translate"></a> 平移（Translate）</h2><p>平移操作并不是一种线性变化。这时我们可以引入齐次坐标</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>z</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>z</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">M = \left[    \begin{array}{ccc}    s_x &amp; 0   &amp; 0   &amp; 0  \\    0   &amp; s_y &amp; 0   &amp; 0  \\    0   &amp; 0   &amp; s_z &amp; 0 \\    t_x &amp; t_y &amp; t_z &amp; 1    \end{array}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.80204em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6520099999999998em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.80499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.40599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.65201em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6520099999999998em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.80499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.40599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.65201em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>第四行的参数代表在三个基础轴上的平移分量</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>DirectX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ASP.NET CORE-01 Model Binding</title>
    <link href="/2020/04/06/ASP.NET%20CORE-01%20Model%20Binding/"/>
    <url>/2020/04/06/ASP.NET%20CORE-01%20Model%20Binding/</url>
    
    <content type="html"><![CDATA[<h2 id="模型绑定到底用来做什么的"><a class="markdownIt-Anchor" href="#模型绑定到底用来做什么的"></a> 模型绑定到底用来做什么的</h2><p>简而言之，就是消费者和服务提供者沟通的中间载体。以<code>Web Api</code>为例，就是当 Api 消费者发送 http 请求数据时，与 Controller 交互时的一种数据载体，<code>Asp.Net Core</code>中是将请求的数据转换承一个键值对的数据结构存起来。根据键名称去和<code>Asp.Net Core</code>中的 Model 进行匹配并赋值。</p><h2 id="aspnet"><a class="markdownIt-Anchor" href="#aspnet"></a> <a href="http://ASP.NET">ASP.NET</a> CORE 中数据的流向</h2><p>读取数据：数据库 =&gt; ORM 框架 =&gt; Controller =&gt; Pages/Api<br />写入数据：Api/Pages =&gt; Controller =&gt; ORM 框架 =&gt;数据库</p><h2 id="页面和-controller-怎么进行数据交互"><a class="markdownIt-Anchor" href="#页面和-controller-怎么进行数据交互"></a> 页面和 Controller 怎么进行数据交互</h2><p>接口消费者（可能是页面或者 web api）通过 http 请求（http request）将请求的参数传递给<code>Asp.Net Core</code>框架，然后框架通过请求管道将请求参数处理为相应的模型，然后根据处理好的参数模型以及路由，决定访问哪一个 Controller 数据库数据与接口消费者需求的数据可能存在一些敏感数据（如，密码等）我们一般会在模型中再加一层 ViewModel 或者 Dto。这样就可以方便地控制返回给接口消费者的数据。</p><h2 id="控制器请求参数来源"><a class="markdownIt-Anchor" href="#控制器请求参数来源"></a> 控制器请求参数来源</h2><table><thead><tr><th style="text-align:center">来源 Attribute</th><th style="text-align:center">来源说明</th><th style="text-align:center">示例</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>[FromQuery]</code></td><td style="text-align:center">从查询字符串获取值。</td><td style="text-align:center"><code>https://test.com/employees?name='trickyrat'&amp;age='12'</code></td><td style="text-align:center">框架会访问 employees 接口，并且传递 name 和 age 到后台模型的两个属性上</td></tr><tr><td style="text-align:center"><code>[FromRoute]</code></td><td style="text-align:center">从路由数据中获取值。</td><td style="text-align:center"><code>https://test.com/employees/&#123;employeesid&#125;</code></td><td style="text-align:center">获取路由中提供的数据</td></tr><tr><td style="text-align:center"><code>[FromForm]</code></td><td style="text-align:center">从已发布的表单字段中获取值。</td><td style="text-align:center"><code>https://test.com/employees</code></td><td style="text-align:center">获取提交的表单中的数据</td></tr><tr><td style="text-align:center"><code>[FromBody]</code></td><td style="text-align:center">从请求正文中获取值。</td><td style="text-align:center"><code>https://test.com/employees</code></td><td style="text-align:center">获取 http 请求 body 中提供的数据</td></tr><tr><td style="text-align:center"><code>[FromHeader]</code></td><td style="text-align:center">从 HTTP 标头中获取值。</td><td style="text-align:center"><code>https://test.com/employees</code></td><td style="text-align:center">获取 http 请求的 header 里面的数据</td></tr></tbody></table><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> IActionResult <span class="hljs-title">Hello</span>(<span class="hljs-params">[FromQuery]HelloRequest request</span>)</span><br>&#123;<br>    ...<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> IActionResult <span class="hljs-title">Hello</span>(<span class="hljs-params">[FromRoute]HelloRequest request</span>)</span><br>&#123;<br>    ...<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> IActionResult <span class="hljs-title">Hello</span>(<span class="hljs-params">[FromForm]HelloRequest request</span>)</span><br>&#123;<br>    ...<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> IActionResult <span class="hljs-title">Hello</span>(<span class="hljs-params">[FromBody]HelloRequest request</span>)</span><br>&#123;<br>    ...<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> IActionResult <span class="hljs-title">Hello</span>(<span class="hljs-params">[FromHeader]HelloRequest request</span>)</span><br>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>这些 Attribute 也可以用于修饰 Model 中的属性，意思也很明了就是说这个属性只能通过特定传参方式传递数据。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span><br>&#123;<br>    [<span class="hljs-meta">FromQuery</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Age &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>;&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">PersonController</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> IActionResult <span class="hljs-title">GetPerson</span>(<span class="hljs-params">[FromBody]Request request</span>)</span><br>    &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此示例中的 Age 会忽略参数中<code>[FromBody]</code>Attribute，Age 只能通过 Query 字符串中获取数据。</p><p><code>Asp.Net Core</code>也提供自定义数据来源，只需要实现<code>IValueProvider</code>和<code>IValueProviderFactory</code>两个接口的类，并且在 startup 中通过依赖注入注入便可以实现。<br />控制器中求情参数可以是简单的内置类型，也可以是自定义的类型。一般简单的接口，只需要几个简单的参数就可以满足，当需求复杂后，便可以自定义一个类型来作为请求参数的载体。</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>ASP.NET CORE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DirectX12 Notes-02 Pipeline</title>
    <link href="/2020/03/28/DirectX12%20Notes-02%20Pipeline/"/>
    <url>/2020/03/28/DirectX12%20Notes-02%20Pipeline/</url>
    
    <content type="html"><![CDATA[<h2 id="directx-12-的初始化"><a class="markdownIt-Anchor" href="#directx-12-的初始化"></a> DirectX 12 的初始化</h2><p>DirectX 12 的初始化过程<code>ID3d12CommandList</code></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>DirectX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DirectX12 Notes-01 Get Started</title>
    <link href="/2020/03/27/DirectX12%20Notes-01%20Get%20Started/"/>
    <url>/2020/03/27/DirectX12%20Notes-01%20Get%20Started/</url>
    
    <content type="html"><![CDATA[<h2 id="系列介绍"><a class="markdownIt-Anchor" href="#系列介绍"></a> 系列介绍</h2><p>最近在阅读<a href="https://book.douban.com/subject/30426701/">《DirectX 12 3D 游戏开发实战》</a>这本书，也就是<a href="https://book.douban.com/subject/26628210/">《Introduction to 3D Game Programming with DirectX 12》</a>的国内翻译版本，然后决定写一个 DirectX 知识点系列。该系列主要讲基于 DirectX12 制作 3D 游戏，内容大概是从基础的 3D 数学讲起,然后递进直到做出一个游戏 demo，并运用上书籍上所有知识点。</p><h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><p>该书前三章主要介绍了 3d 数学的基础，向量、矩阵和变换三个要点以及在 3d 运算中扮演的角色。</p><h3 id="向量"><a class="markdownIt-Anchor" href="#向量"></a> 向量</h3><p>向量（<a href="https://en.wikipedia.org/wiki/Euclidean_vector">vector</a>）就是一种带有大小（模，<a href="https://en.wikipedia.org/wiki/Magnitude_(mathematics)">magnitude</a>）和方向（direction）的量。如，物理上常见的力。</p><h3 id="矩阵"><a class="markdownIt-Anchor" href="#矩阵"></a> 矩阵</h3><p>矩阵（<a href="https://en.wikipedia.org/wiki/Matrix_(mathematics)">matrix</a>），一个 m×n 的矩阵是由 m 行 n 列的实数所构建的矩形阵列。右图便是一个矩阵： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>5</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>6</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>7</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>9</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[    \begin{matrix}    1 &amp; 2 &amp; 3 \\    4 &amp; 5 &amp; 6 \\    7 &amp; 8 &amp; 9    \end{matrix}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span><br />矩阵的几何意义就是将某个数据从 A 坐标系转换到 B 坐标系，在 3d 中应用便是将向量在不同的空间转换。</p><h3 id="线性变换"><a class="markdownIt-Anchor" href="#线性变换"></a> 线性变换</h3><p>线性变换（linear transformation）：数学上如果函数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>τ</mi><mo stretchy="false">(</mo><mi>ν</mi><mo stretchy="false">)</mo><mo>=</mo><mi>τ</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mi>τ</mi><mo stretchy="false">(</mo><msup><mi>x</mi><mo mathvariant="normal">′</mo></msup><mo separator="true">,</mo><msup><mi>y</mi><mo mathvariant="normal">′</mo></msup><mo separator="true">,</mo><msup><mi>z</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\tau(\nu) = \tau(x, y, z) = \tau(x&#x27;, y&#x27;, z&#x27;)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.06366em;">ν</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，此函数的输入和输出都是 3D 向量，当且仅当此函数满足</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>τ</mi><mo stretchy="false">(</mo><mi>u</mi><mo>+</mo><mi>v</mi><mo stretchy="false">)</mo><mo>=</mo><mi>τ</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo><mo>+</mo><mi>τ</mi><mo stretchy="false">(</mo><mi>v</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>τ</mi><mo stretchy="false">(</mo><mi>k</mi><mi>u</mi><mo stretchy="false">)</mo><mo>=</mo><mi>k</mi><mi>τ</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}\tau(u + v) = \tau(u) + \tau(v) \\\tau(ku) = k\tau(u)\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">u</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>则称<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>τ</mi></mrow><annotation encoding="application/x-tex">\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span></span></span></span>为 v 的线性变换。其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>u</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>u</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>u</mi><mi>z</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">u = (u_x, u_y, u_z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>v</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>z</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">v = (v_x, v_y, v_z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>是任意的 3D 向量，k 为标量。</p><p>线性变换主要靠矩阵来实现，如<code>ObjectToWorldMatrix</code>便是将对象从对象空间转换到世界空间。DirectX12 中矩阵<code>XMMATRIX</code>使用齐次坐标，即 4x4。<a href="https://trickyrat.github.io/2020/04/06/DirectX12%E7%AC%94%E8%AE%B0-03//">为什么不使用 3x3 的矩阵呢？</a></p><h2 id="参考文献"><a class="markdownIt-Anchor" href="#参考文献"></a> 参考文献</h2><ul><li><a href="https://book.douban.com/subject/26628210/">Introduction to 3D Game Programming with DirectX 12, Frank D.Luna</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
      <category>DirectX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode-03 Longest Substring Without Repeating Characters</title>
    <link href="/2019/11/22/Leetcode-03/"/>
    <url>/2019/11/22/Leetcode-03/</url>
    
    <content type="html"><![CDATA[<h2 id="无重复字符的最长子串longest-substring-without-repeating-characters"><a class="markdownIt-Anchor" href="#无重复字符的最长子串longest-substring-without-repeating-characters"></a> 无重复字符的最长子串（Longest Substring Without Repeating Characters）</h2><h2 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 目录</h2><h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3><h4 id="示例-1"><a class="markdownIt-Anchor" href="#示例-1"></a> 示例  1:</h4><blockquote><p>输入: “abcabcbb”<br />输出: 3<br />解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</p></blockquote><h4 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例 2:</h4><blockquote><p>输入: “bbbbb”<br />输出: 1<br />解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。</p></blockquote><h4 id="示例-3"><a class="markdownIt-Anchor" href="#示例-3"></a> 示例 3:</h4><blockquote><p>输入: “pwwkew”<br />输出: 3<br />解释: 因为无重复字符的最长子串是  “wke”，所以其长度为 3。</p></blockquote><p>请注意，你的答案必须是 子串 的长度，“pwke”  是一个子序列，不是子串。</p><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>我们可以维护一个范围[i, j)的窗口来保存子串，使用 HashSet/HashMap 作为容器，对 s 进行遍历。如果窗口中不包含有 s[j]，则将 s[j]添加到窗口中并计数，反之，将 s[i]从窗口中移除。也可以使用一个 int 数组来代替 HashSet。</p><table><thead><tr><th style="text-align:center">数组</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">int [26]</td><td style="text-align:center">‘A’-‘Z’和’a’-‘z’</td></tr><tr><td style="text-align:center">int [128]</td><td style="text-align:center">ASCII 码</td></tr><tr><td style="text-align:center">int [256]</td><td style="text-align:center">ASCII 扩展码</td></tr></tbody></table><p>时间复杂度为 O(n)，遍历一次 s，n 为 s 的长度；<br />空间复杂度为 O(min(m,n))，需要额外的 HashSet，取决于 s 的长度 n 和窗口长度 m。</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">LongestSubstringWithoutRepeating</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span><br>    &#123;<br>        <span class="hljs-comment">// 96 ms int[]</span><br>        <span class="hljs-comment">// int n = s.Length, ans = 0;</span><br>        <span class="hljs-comment">// int[] index = new int[128]; // new int[256];</span><br>        <span class="hljs-comment">// for (int j = 0, i = 0; j &lt; n; j++)</span><br>        <span class="hljs-comment">// &#123;</span><br>        <span class="hljs-comment">//     i = Math.Max(index[s[j]], i);</span><br>        <span class="hljs-comment">//     ans = Math.Max(ans, j - i + 1);</span><br>        <span class="hljs-comment">//     index[s[j]] = j + 1;</span><br>        <span class="hljs-comment">// &#125;</span><br>        <span class="hljs-comment">// return ans;</span><br><br>        <span class="hljs-comment">// 100 ms HashSet&lt;char&gt;</span><br>        <span class="hljs-comment">// int len = s.Length;</span><br>        <span class="hljs-comment">// HashSet&lt;char&gt; set = new HashSet&lt;char&gt;();</span><br>        <span class="hljs-comment">// int ans = 0, i = 0, j = 0;</span><br>        <span class="hljs-comment">// while (i &lt; len &amp;&amp; j &lt; len)</span><br>        <span class="hljs-comment">// &#123;</span><br>        <span class="hljs-comment">//     if (!set.Contains(s[j]))</span><br>        <span class="hljs-comment">//     &#123;</span><br>        <span class="hljs-comment">//         set.Add(s[j++]);</span><br>        <span class="hljs-comment">//         ans = Math.Max(ans, j - i);</span><br>        <span class="hljs-comment">//     &#125;</span><br>        <span class="hljs-comment">//     else set.Remove(s[i++]);</span><br>        <span class="hljs-comment">// &#125;</span><br>        <span class="hljs-comment">// return ans;</span><br><br>        <span class="hljs-comment">// 100ms Dictionary&lt;char, int&gt;</span><br>        <span class="hljs-built_in">int</span> n = s.Length, ans = <span class="hljs-number">0</span>;<br>        Dictionary&lt;<span class="hljs-built_in">char</span>, <span class="hljs-built_in">int</span>&gt; dic = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">char</span>, <span class="hljs-built_in">int</span>&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>, i = <span class="hljs-number">0</span>; j &lt; n; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (dic.ContainsKey(s[j]))<br>            &#123;<br>                i = Math.Max(dic[s[j]], i);<br>                dic[s[j]] = j + <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> dic.Add(s[j], j + <span class="hljs-number">1</span>);<br>            ans = Math.Max(ans, j - i + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(std::string s)</span> </span>&#123;<br>        <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dic</span><span class="hljs-params">(<span class="hljs-number">256</span>, <span class="hljs-number">-1</span>)</span></span>;<br>        <span class="hljs-type">int</span> maxlen = <span class="hljs-number">0</span>, start = <span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> len = s.<span class="hljs-built_in">length</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i != len; i++) &#123;<br>            <span class="hljs-keyword">if</span> (dic[s[i]] &gt; start)<br>                start = dic[s[i]];<br>            dic[s[i]] = i;<br>            maxlen = std::<span class="hljs-built_in">max</span>(maxlen, i - start);<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxlen;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Python 代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lengthOfLongestSubstring</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        size = <span class="hljs-built_in">len</span>(s)<br>        ans = i = <span class="hljs-number">0</span><br>        index = [<span class="hljs-number">0</span>] * <span class="hljs-number">128</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, size):<br>            i = <span class="hljs-built_in">max</span>(index[<span class="hljs-built_in">ord</span>(s[j])], i)<br>            ans = <span class="hljs-built_in">max</span>(ans, j - i + <span class="hljs-number">1</span>)<br>            index[<span class="hljs-built_in">ord</span>(s[j])] = j + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><p>Typescript 代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">lengthOfLongestSubstring</span>(<span class="hljs-params">s: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">number</span> &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">len</span>: <span class="hljs-built_in">number</span> = s.<span class="hljs-property">length</span>,<br>    <span class="hljs-attr">ans</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">index</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">number</span>&gt;(<span class="hljs-number">128</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; j &lt; len; j++) &#123;<br>    i = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(index[s[j].<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>)], i);<br>    ans = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(ans, j - i + <span class="hljs-number">1</span>);<br>    index[s[j].<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>)] = j + <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithms</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode-02 Add Two Numbers</title>
    <link href="/2019/11/21/Leetcode-02/"/>
    <url>/2019/11/21/Leetcode-02/</url>
    
    <content type="html"><![CDATA[<h2 id="两数相加add-two-numbers"><a class="markdownIt-Anchor" href="#两数相加add-two-numbers"></a> 两数相加（Add Two Numbers）</h2><h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3><p>给出两个非空的链表用来表示两个非负的整数。其中，它们各自的位数是按照逆序的方式存储的，并且它们的每个节点只能存储一位数字。<br />如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0  开头。</p><h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3><blockquote><p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br />输出：7 -&gt; 0 -&gt; 8<br />原因：342 + 465 = 807</p></blockquote><h3 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h3><p>其实和我们算加法一样，从个位开始计算就行了,如图所示<br /><img src="/img/bg/Leetcode-02/figure1.png" alt="figure1" /><br />只要把两条链表相应位置相加，记录是否有进位(通过 sum/10 来判断)，有则进位，添加到一条新的链表结点就行了。值得注意的是，相加后有几种情景，分别是</p><table><thead><tr><th style="text-align:center">情景</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">1+1</td><td style="text-align:center">不进位</td></tr><tr><td style="text-align:center">12+8</td><td style="text-align:center">进一次位</td></tr><tr><td style="text-align:center">9993+7</td><td style="text-align:center">连续进位</td></tr><tr><td style="text-align:center">0+12</td><td style="text-align:center">有空的结点</td></tr></tbody></table><p>对应结点的和 sum = x + y + carry，carry 则是 sum/10，对应的该位结点值为 sum%10。</p><p>因为只需要遍历最长的链表，挨个结点相加，所以时间复杂度为 O(max(m,n))，m 和 n 分别是两条链表的长度；<br />需要新的一条链表来记录结果，最多为 max(m,n)+1(最高位有进位情况)，所以空间复杂度为 O(max(m,n))。</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><p>C#代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">AddTwoNumbers</span>(<span class="hljs-params">ListNode l1, ListNode l2</span>)</span><br>    &#123;<br>        ListNode dummyHead = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (l1 == <span class="hljs-literal">null</span> &amp;&amp; l2 == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> dummyHead;<br>        <span class="hljs-built_in">int</span> carry = <span class="hljs-number">0</span>;<br>        ListNode curr = dummyHead;<br>        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">null</span> || l2 != <span class="hljs-literal">null</span>)<br>        &#123;<br>            <span class="hljs-built_in">int</span> num1 = l1?.val ?? <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">int</span> num2 = l2?.val ?? <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">int</span> sum = num1 + num2 + carry;<br>            curr.next = <span class="hljs-keyword">new</span> ListNode(sum % <span class="hljs-number">10</span>);<br>            curr = curr.next;<br>            carry = sum / <span class="hljs-number">10</span>;<br>            l1 = l1?.next;<br>            l2 = l2?.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (carry != <span class="hljs-number">0</span>)<br>        &#123;<br>            curr.next = <span class="hljs-keyword">new</span> ListNode(carry);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummyHead.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>        <span class="hljs-function">ListNode <span class="hljs-title">preHead</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span>, *p </span>= &amp;preHead;<br>        <span class="hljs-type">int</span> carry = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (l1 || l2 || carry) &#123;<br>            <span class="hljs-type">int</span> sum = (l1 ? l1-&gt;val : <span class="hljs-number">0</span>) + (l2 ? l2-&gt;val : <span class="hljs-number">0</span>) + carry;<br>            carry = sum / <span class="hljs-number">10</span>;<br>            p-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(sum % <span class="hljs-number">10</span>);<br>            p = p-&gt;next;<br>            l1 = l1 ? l1-&gt;next : l1;<br>            l2 = l2 ? l2-&gt;next : l2;<br>        &#125;<br>        <span class="hljs-keyword">return</span> preHead.next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Python 代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addTwoNumbers</span>(<span class="hljs-params">self, l1: ListNode, l2: ListNode</span>) -&gt; ListNode:<br>        carry = <span class="hljs-number">0</span><br>        dummy_head = ListNode(<span class="hljs-literal">None</span>)<br>        curr = dummy_head<br>        <span class="hljs-keyword">while</span> l1 <span class="hljs-keyword">or</span> l2:<br>            <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> l1:<br>                <span class="hljs-built_in">sum</span> += l1.val<br>                l1 = l1.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">if</span> l2:<br>                <span class="hljs-built_in">sum</span> += l2.val<br>                l2 = l2.<span class="hljs-built_in">next</span><br>            <span class="hljs-built_in">sum</span> +=  carry<br>            curr.<span class="hljs-built_in">next</span> = ListNode(<span class="hljs-built_in">sum</span>%<span class="hljs-number">10</span>)<br>            curr = curr.<span class="hljs-built_in">next</span><br>            carry = <span class="hljs-built_in">sum</span>//<span class="hljs-number">10</span><br>        <span class="hljs-keyword">if</span> carry != <span class="hljs-number">0</span>:<br>            curr.<span class="hljs-built_in">next</span> = ListNode(carry)<br>        <span class="hljs-keyword">return</span> dummy_head.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><p>Typescript 代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addTwoNumbers</span>(<span class="hljs-params"></span><br><span class="hljs-params">  l1: ListNode | <span class="hljs-literal">null</span>,</span><br><span class="hljs-params">  l2: ListNode | <span class="hljs-literal">null</span></span><br><span class="hljs-params"></span>): <span class="hljs-title class_">ListNode</span> | <span class="hljs-literal">null</span> &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">dummyHead</span>: <span class="hljs-title class_">ListNode</span> | <span class="hljs-literal">null</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">carry</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">curr</span>: <span class="hljs-title class_">ListNode</span> | <span class="hljs-literal">null</span> = dummyHead;<br>  <span class="hljs-keyword">while</span> (l1 || l2) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">sum</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l1) &#123;<br>      sum += l1.<span class="hljs-property">val</span>;<br>      l1 = l1.<span class="hljs-property">next</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (l2) &#123;<br>      sum += l2.<span class="hljs-property">val</span>;<br>      l2 = l2.<span class="hljs-property">next</span>;<br>    &#125;<br>    sum += carry;<br>    curr.<span class="hljs-property">next</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(sum % <span class="hljs-number">10</span>);<br>    curr = curr.<span class="hljs-property">next</span>;<br>    carry = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(sum / <span class="hljs-number">10</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (carry != <span class="hljs-number">0</span>) &#123;<br>    curr.<span class="hljs-property">next</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(carry);<br>  &#125;<br>  <span class="hljs-keyword">return</span> dummyHead.<span class="hljs-property">next</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="引用"><a class="markdownIt-Anchor" href="#引用"></a> 引用</h2><p>截图来自<a href="https://leetcode-cn.com/add-two-numbers">Leetcode-cn</a>.</p>]]></content>
    
    
    <categories>
      
      <category>Algorithms</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode-01 Two Sum</title>
    <link href="/2019/11/20/Leetcode-01/"/>
    <url>/2019/11/20/Leetcode-01/</url>
    
    <content type="html"><![CDATA[<h2 id="两数之和two-sum"><a class="markdownIt-Anchor" href="#两数之和two-sum"></a> 两数之和（Two Sum）</h2><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>给定一个整数数组和一个目标值，找出数组中和为目标值的两个数，<br />你可以假设每个输入只对应一个答案，且同样的元素不能被重复利用。</p><h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3><blockquote><p>给定数组 nums = [2, 7, 11, 15], target = 9，<br />因为 nums[0] + nums[1] = 2 + 7 =9，<br />所以返回结果 [0, 1]。</p></blockquote><h3 id="分析过程"><a class="markdownIt-Anchor" href="#分析过程"></a> 分析过程：</h3><p>初看题目，首先想到两次循环暴力匹配。遍历数组 nums 查找是否有满足 target-nums[i]的元素。显然时间复杂度为 O(n^2)，空间复杂度为 O(1)。​</p><p>C# 代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span>[] <span class="hljs-title">TwoSum</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] nums, <span class="hljs-built_in">int</span> target</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-built_in">int</span> len = nums.Length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>        &#123;<br>            <span class="hljs-built_in">int</span> numberToFind = target - nums[i];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = i + <span class="hljs-number">1</span>; j &lt; len; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(nums[j] == numberToFind)<br>                &#123;<br>                    res[<span class="hljs-number">0</span>] = i;<br>                    res[<span class="hljs-number">1</span>] = j;<br>                    <span class="hljs-keyword">return</span> res;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实细想，我们只需要遍历一次数组，将然后根据 target-nums[i]为 key 在 HashTable 中查找是否有与之匹配的 value，如果有则说明找到了目标，并将当前索引和 hashtable 中的 value 返回；没有则将当前值作为 key，当前索引作为 value 存入 hashtable 中。<br />因为 hashtable 的查询平均时间复杂度为 O(1)，所以我们的算法时间复杂度从 O(n^2)降到 O(n),因为引入了一个 hashtable，并且最坏情况需要将整个数组的数据放入，所以空降复杂度为 O(n)。</p><p>C# 代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span>[] <span class="hljs-title">TwoSum</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] nums, <span class="hljs-built_in">int</span> target</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">2</span>];<br>        Dictionary&lt;<span class="hljs-built_in">int</span>,<span class="hljs-built_in">int</span>&gt; dict = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.Length; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(dic.TryGetValue(target - nums[i], <span class="hljs-keyword">out</span> <span class="hljs-built_in">int</span> <span class="hljs-keyword">value</span>)) <span class="hljs-comment">// O(1)</span><br>            &#123;<br>              res[<span class="hljs-number">1</span>] = i;<br>              res[<span class="hljs-number">0</span>] = <span class="hljs-keyword">value</span>;<br>              <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!dic.ContainsKey(nums[i])) <span class="hljs-comment">// O(1)</span><br>            &#123;<br>                dic.Add(nums[i], i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++ 代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> size = nums.<span class="hljs-built_in">size</span>();<br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; hash;<br>        vector&lt;<span class="hljs-type">int</span>&gt; result;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            <span class="hljs-type">int</span> numberToFind = target - nums[i];<br>            <span class="hljs-keyword">if</span> (hash.<span class="hljs-built_in">contains</span>(numberToFind)) &#123;<br>                result.<span class="hljs-built_in">push_back</span>(hash[numberToFind]);<br>                result.<span class="hljs-built_in">push_back</span>(i);<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>            hash[nums[i]] = i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Python 代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, nums, target</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type nums: List[int]</span><br><span class="hljs-string">        :type target: int</span><br><span class="hljs-string">        :rtype: List[int]</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nums) &lt;= <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        buff_dict = &#123;&#125;<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>            <span class="hljs-keyword">if</span> nums[i] <span class="hljs-keyword">in</span> buff_dict:<br>                <span class="hljs-keyword">return</span> [buff_dict[nums[i]], i]<br>            <span class="hljs-keyword">else</span>:<br>                buff_dict[target - nums[i]] = i<br></code></pre></td></tr></table></figure><p>Rust 代码</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::HashMap;<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">two_sum</span>(nums: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt;, target: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt; &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">hash</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>        <span class="hljs-title function_ invoke__">for</span> (index, value) <span class="hljs-keyword">in</span> nums.<span class="hljs-title function_ invoke__">iter</span>().<span class="hljs-title function_ invoke__">enumerate</span>() &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">number_to_find</span> = target - *value;<br>            <span class="hljs-keyword">if</span> hash.<span class="hljs-title function_ invoke__">contains_key</span>(&amp;number_to_find) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">vec!</span>[hash[&amp;number_to_find], index <span class="hljs-keyword">as</span> <span class="hljs-type">i32</span>];<br>            &#125;<br>            hash.<span class="hljs-title function_ invoke__">insert</span>(value, index <span class="hljs-keyword">as</span> <span class="hljs-type">i32</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">vec!</span>[];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Javascript 代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> twoSum = <span class="hljs-keyword">function</span> (<span class="hljs-params">nums, target</span>) &#123;<br>  <span class="hljs-keyword">var</span> hash = &#123;&#125;;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">let</span> index = hash[target - nums[i]];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> index !== <span class="hljs-string">&quot;undefined&quot;</span>) &#123;<br>      <span class="hljs-keyword">return</span> [index, i];<br>    &#125;<br>    hash[nums[i]] = i;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Typescript 代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">nums: <span class="hljs-built_in">number</span>[], target: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span>[] &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">res</span>: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">dic</span>: <span class="hljs-title class_">Map</span>&lt;<span class="hljs-built_in">number</span>, <span class="hljs-built_in">number</span>&gt; = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>&lt;<span class="hljs-built_in">number</span>, <span class="hljs-built_in">number</span>&gt;();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (dic.<span class="hljs-title function_">has</span>(target - nums[i])) &#123;<br>      res[<span class="hljs-number">0</span>] = dic.<span class="hljs-title function_">get</span>(target - nums[i]) <span class="hljs-keyword">as</span> <span class="hljs-built_in">number</span>;<br>      res[<span class="hljs-number">1</span>] = i;<br>      <span class="hljs-keyword">return</span> res;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      dic.<span class="hljs-title function_">set</span>(nums[i], i);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> [];<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithms</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithms</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
